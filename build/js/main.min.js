(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AirDatepicker=t():e.AirDatepicker=t()}(this,(function(){return function(){"use strict";var e={d:function(t,i){for(var s in i)e.o(i,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:i[s]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},t={};e.d(t,{default:function(){return R}});var i={days:"days",months:"months",years:"years",day:"day",month:"month",year:"year",eventChangeViewDate:"changeViewDate",eventChangeCurrentView:"changeCurrentView",eventChangeFocusDate:"changeFocusDate",eventChangeSelectedDate:"changeSelectedDate",eventChangeTime:"changeTime",eventChangeLastSelectedDate:"changeLastSelectedDate",actionSelectDate:"selectDate",actionUnselectDate:"unselectDate",cssClassWeekend:"-weekend-"},s={classes:"",inline:!1,locale:{days:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],daysShort:["Вос","Пон","Вто","Сре","Чет","Пят","Суб"],daysMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthsShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],today:"Сегодня",clear:"Очистить",dateFormat:"dd.MM.yyyy",timeFormat:"HH:mm",firstDay:1},startDate:new Date,firstDay:"",weekends:[6,0],dateFormat:"",altField:"",altFieldDateFormat:"T",toggleSelected:!0,keyboardNav:!0,selectedDates:!1,container:"",isMobile:!1,visible:!1,position:"bottom left",offset:12,view:i.days,minView:i.days,showOtherMonths:!0,selectOtherMonths:!0,moveToOtherMonthsOnSelect:!0,showOtherYears:!0,selectOtherYears:!0,moveToOtherYearsOnSelect:!0,minDate:"",maxDate:"",disableNavWhenOutOfRange:!0,multipleDates:!1,multipleDatesSeparator:", ",range:!1,dynamicRange:!0,buttons:!1,monthsField:"monthsShort",showEvent:"focus",autoClose:!1,fixedHeight:!1,prevHtml:'<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',nextHtml:'<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',navTitles:{days:"MMMM, <i>yyyy</i>",months:"yyyy",years:"yyyy1 - yyyy2"},timepicker:!1,onlyTimepicker:!1,dateTimeSeparator:" ",timeFormat:"",minHours:0,maxHours:24,minMinutes:0,maxMinutes:59,hoursStep:1,minutesStep:1,onSelect:!1,onChangeViewDate:!1,onChangeView:!1,onRenderCell:!1,onShow:!1,onHide:!1,onClickDayName:!1};function a(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return"string"==typeof e?t.querySelector(e):e}function n(){let{tagName:e="div",className:t="",innerHtml:i="",id:s="",attrs:a={}}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=document.createElement(e);return t&&n.classList.add(...t.split(" ")),s&&(n.id=s),i&&(n.innerHTML=i),a&&r(n,a),n}function r(e,t){for(let[i,s]of Object.entries(t))void 0!==s&&e.setAttribute(i,s);return e}function o(e){return new Date(e.getFullYear(),e.getMonth()+1,0).getDate()}function h(e){let t=e.getHours(),{hours:i,dayPeriod:s}=l(t);return{year:e.getFullYear(),month:e.getMonth(),fullMonth:e.getMonth()+1<10?"0"+(e.getMonth()+1):e.getMonth()+1,date:e.getDate(),fullDate:e.getDate()<10?"0"+e.getDate():e.getDate(),day:e.getDay(),hours:t,fullHours:d(t),hours12:i,dayPeriod:s,fullHours12:d(i),minutes:e.getMinutes(),fullMinutes:e.getMinutes()<10?"0"+e.getMinutes():e.getMinutes()}}function l(e){return{dayPeriod:e>11?"pm":"am",hours:e%12==0?12:e%12}}function d(e){return e<10?"0"+e:e}function c(e){let t=10*Math.floor(e.getFullYear()/10);return[t,t+9]}function u(){let e=[];for(var t=arguments.length,i=new Array(t),s=0;s<t;s++)i[s]=arguments[s];return i.forEach((t=>{if("object"==typeof t)for(let i in t)t[i]&&e.push(i);else t&&e.push(t)})),e.join(" ")}function p(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.days;if(!e||!t)return!1;let a=h(e),n=h(t);return{[i.days]:a.date===n.date&&a.month===n.month&&a.year===n.year,[i.months]:a.month===n.month&&a.year===n.year,[i.years]:a.year===n.year}[s]}function m(e,t,i){let s=g(e,!1).getTime(),a=g(t,!1).getTime();return i?s>=a:s>a}function v(e,t){return!m(e,t,!0)}function g(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=new Date(e.getTime());return"boolean"!=typeof t||t||function(e){e.setHours(0,0,0,0)}(i),i}function D(e,t,i){e.length?e.forEach((e=>{e.addEventListener(t,i)})):e.addEventListener(t,i)}function y(e,t){return!(!e||e===document||e instanceof DocumentFragment)&&(e.matches(t)?e:y(e.parentNode,t))}function f(e,t,i){return e>i?i:e<t?t:e}function w(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),s=1;s<t;s++)i[s-1]=arguments[s];return i.filter((e=>e)).forEach((t=>{for(let[i,s]of Object.entries(t))if(void 0!==s&&"[object Object]"===s.toString()){let t=void 0!==e[i]?e[i].toString():void 0,a=s.toString(),n=Array.isArray(s)?[]:{};e[i]=e[i]?t!==a?n:e[i]:n,w(e[i],s)}else e[i]=s})),e}function b(e){let t=e;return e instanceof Date||("string"==typeof e&&/^\d{4}-\d{2}-\d{2}$/.test(e)&&(e+="T00:00:00"),t=new Date(e)),isNaN(t.getTime())&&(console.log(`Unable to convert value "${e}" to Date object`),t=!1),t}function k(e){let t="\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";return new RegExp("(^|>|"+t+")("+e+")($|<|"+t+")","g")}function $(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class C{constructor(){let{type:e,date:t,dp:i,opts:s,body:a}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};$(this,"focus",(()=>{this.$cell.classList.add("-focus-"),this.focused=!0})),$(this,"removeFocus",(()=>{this.$cell.classList.remove("-focus-"),this.focused=!1})),$(this,"select",(()=>{this.$cell.classList.add("-selected-"),this.selected=!0})),$(this,"removeSelect",(()=>{this.$cell.classList.remove("-selected-","-range-from-","-range-to-"),this.selected=!1})),$(this,"onChangeSelectedDate",(()=>{this.isDisabled||(this._handleSelectedStatus(),this.opts.range&&this._handleRangeStatus())})),$(this,"onChangeFocusDate",(e=>{if(!e)return void(this.focused&&this.removeFocus());let t=p(e,this.date,this.type);t?this.focus():!t&&this.focused&&this.removeFocus(),this.opts.range&&this._handleRangeStatus()})),$(this,"render",(()=>(this.$cell.innerHTML=this._getHtml(),this._handleClasses(),this.$cell))),this.type=e,this.singleType=this.type.slice(0,-1),this.date=t,this.dp=i,this.opts=s,this.body=a,this.customData=!1,this.init()}init(){var e;let{onRenderCell:t}=this.opts;t&&(this.customData=t({date:this.date,cellType:this.singleType,datepicker:this.dp})),this._createElement(),this._bindDatepickerEvents(),null!==(e=this.customData)&&void 0!==e&&e.disabled&&this.dp.disableDate(this.date)}_bindDatepickerEvents(){this.dp.on(i.eventChangeSelectedDate,this.onChangeSelectedDate),this.dp.on(i.eventChangeFocusDate,this.onChangeFocusDate)}unbindDatepickerEvents(){this.dp.off(i.eventChangeSelectedDate,this.onChangeSelectedDate),this.dp.off(i.eventChangeFocusDate,this.onChangeFocusDate)}_createElement(){var e;let{year:t,month:i,date:s}=h(this.date),a=(null===(e=this.customData)||void 0===e?void 0:e.attrs)||{};this.$cell=n({attrs:{"data-year":t,"data-month":i,"data-date":s,...a}}),this.$cell.adpCell=this}_getClassName(){var e;let t=new Date,{selectOtherMonths:s,selectOtherYears:a}=this.opts,{minDate:n,maxDate:r,isDateDisabled:o}=this.dp,{day:l}=h(this.date),d=this._isOutOfMinMaxRange(),c=o(this.date),m=u("air-datepicker-cell",`-${this.singleType}-`,{"-current-":p(t,this.date,this.type),"-min-date-":n&&p(n,this.date,this.type),"-max-date-":r&&p(r,this.date,this.type)}),v="";switch(this.type){case i.days:v=u({"-weekend-":this.dp.isWeekend(l),"-other-month-":this.isOtherMonth,"-disabled-":this.isOtherMonth&&!s||d||c});break;case i.months:v=u({"-disabled-":d});break;case i.years:v=u({"-other-decade-":this.isOtherDecade,"-disabled-":d||this.isOtherDecade&&!a})}return u(m,v,null===(e=this.customData)||void 0===e?void 0:e.classes).split(" ")}_getHtml(){var e;let{year:t,month:s,date:a}=h(this.date),{showOtherMonths:n,showOtherYears:r}=this.opts;if(null!==(e=this.customData)&&void 0!==e&&e.html)return this.customData.html;switch(this.type){case i.days:return!n&&this.isOtherMonth?"":a;case i.months:return this.dp.locale[this.opts.monthsField][s];case i.years:return!r&&this.isOtherDecade?"":t}}_isOutOfMinMaxRange(){let{minDate:e,maxDate:t}=this.dp,{type:s,date:a}=this,{month:n,year:r,date:o}=h(a),l=s===i.days,d=s===i.years,c=!!e&&new Date(r,d?e.getMonth():n,l?o:e.getDate()),u=!!t&&new Date(r,d?t.getMonth():n,l?o:t.getDate());return e&&t?v(c,e)||m(u,t):e?v(c,e):t?m(u,t):void 0}destroy(){this.unbindDatepickerEvents()}_handleRangeStatus(){const{selectedDates:e,focusDate:t,rangeDateTo:i,rangeDateFrom:s}=this.dp,a=e.length;if(!a)return;let n=s,r=i;if(1===a&&t){const i=m(t,e[0]);n=i?e[0]:t,r=i?t:e[0]}let o=u({"-in-range-":n&&r&&(h=this.date,l=n,d=r,m(h,l)&&v(h,d)),"-range-from-":n&&p(this.date,n,this.type),"-range-to-":r&&p(this.date,r,this.type)});var h,l,d;this.$cell.classList.remove("-range-from-","-range-to-","-in-range-"),o&&this.$cell.classList.add(...o.split(" "))}_handleSelectedStatus(){let e=this.dp._checkIfDateIsSelected(this.date,this.type);e?this.select():!e&&this.selected&&this.removeSelect()}_handleInitialFocusStatus(){p(this.dp.focusDate,this.date,this.type)&&this.focus()}_handleClasses(){this.$cell.setAttribute("class",""),this._handleInitialFocusStatus(),this.dp.hasSelectedDates&&(this._handleSelectedStatus(),this.dp.opts.range&&this._handleRangeStatus()),this.$cell.classList.add(...this._getClassName())}get isDisabled(){return this.$cell.matches(".-disabled-")}get isOtherMonth(){return this.dp.isOtherMonth(this.date)}get isOtherDecade(){return this.dp.isOtherDecade(this.date)}}function _(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}let M={[i.days]:`<div class="air-datepicker-body--day-names"></div><div class="air-datepicker-body--cells -${i.days}-"></div>`,[i.months]:`<div class="air-datepicker-body--cells -${i.months}-"></div>`,[i.years]:`<div class="air-datepicker-body--cells -${i.years}-"></div>`};const S=".air-datepicker-cell";class T{constructor(e){let{dp:t,type:s,opts:a}=e;_(this,"handleClick",(e=>{let t=e.target.closest(S).adpCell;if(t.isDisabled)return;if(!this.dp.isMinViewReached)return void this.dp.down();let i=this.dp._checkIfDateIsSelected(t.date,t.type);i?this.dp._handleAlreadySelectedDates(i,t.date):this.dp.selectDate(t.date)})),_(this,"handleDayNameClick",(e=>{let t=e.target.getAttribute("data-day-index");this.opts.onClickDayName({dayIndex:Number(t),datepicker:this.dp})})),_(this,"onChangeCurrentView",(e=>{e!==this.type?this.hide():(this.show(),this.render())})),_(this,"onMouseOverCell",(e=>{let t=y(e.target,S);this.dp.setFocusDate(!!t&&t.adpCell.date)})),_(this,"onMouseOutCell",(()=>{this.dp.setFocusDate(!1)})),_(this,"onClickBody",(e=>{let{onClickDayName:t}=this.opts,i=e.target;i.closest(S)&&this.handleClick(e),t&&i.closest(".air-datepicker-body--day-name")&&this.handleDayNameClick(e)})),_(this,"onMouseDown",(e=>{this.pressed=!0;let t=y(e.target,S),i=t&&t.adpCell;p(i.date,this.dp.rangeDateFrom)&&(this.rangeFromFocused=!0),p(i.date,this.dp.rangeDateTo)&&(this.rangeToFocused=!0)})),_(this,"onMouseMove",(e=>{if(!this.pressed||!this.dp.isMinViewReached)return;e.preventDefault();let t=y(e.target,S),i=t&&t.adpCell,{selectedDates:s,rangeDateTo:a,rangeDateFrom:n}=this.dp;if(!i||i.isDisabled)return;let{date:r}=i;if(2===s.length){if(this.rangeFromFocused&&!m(r,a)){let{hours:e,minutes:t}=h(n);r.setHours(e),r.setMinutes(t),this.dp.rangeDateFrom=r,this.dp.replaceDate(n,r)}if(this.rangeToFocused&&!v(r,n)){let{hours:e,minutes:t}=h(a);r.setHours(e),r.setMinutes(t),this.dp.rangeDateTo=r,this.dp.replaceDate(a,r)}}})),_(this,"onMouseUp",(()=>{this.pressed=!1,this.rangeFromFocused=!1,this.rangeToFocused=!1})),_(this,"onChangeViewDate",((e,t)=>{if(!this.isVisible)return;let s=c(e),a=c(t);switch(this.dp.currentView){case i.days:if(p(e,t,i.months))return;break;case i.months:if(p(e,t,i.years))return;break;case i.years:if(s[0]===a[0]&&s[1]===a[1])return}this.render()})),_(this,"render",(()=>{this.destroyCells(),this._generateCells(),this.cells.forEach((e=>{this.$cells.appendChild(e.render())}))})),this.dp=t,this.type=s,this.opts=a,this.cells=[],this.$el="",this.pressed=!1,this.isVisible=!0,this.init()}init(){this._buildBaseHtml(),this.type===i.days&&this.renderDayNames(),this.render(),this._bindEvents(),this._bindDatepickerEvents()}_bindEvents(){let{range:e,dynamicRange:t}=this.opts;D(this.$el,"mouseover",this.onMouseOverCell),D(this.$el,"mouseout",this.onMouseOutCell),D(this.$el,"click",this.onClickBody),e&&t&&(D(this.$el,"mousedown",this.onMouseDown),D(this.$el,"mousemove",this.onMouseMove),D(window.document,"mouseup",this.onMouseUp))}_bindDatepickerEvents(){this.dp.on(i.eventChangeViewDate,this.onChangeViewDate),this.dp.on(i.eventChangeCurrentView,this.onChangeCurrentView)}_buildBaseHtml(){this.$el=n({className:`air-datepicker-body -${this.type}-`,innerHtml:M[this.type]}),this.$names=a(".air-datepicker-body--day-names",this.$el),this.$cells=a(".air-datepicker-body--cells",this.$el)}_getDayNamesHtml(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.dp.locale.firstDay,t="",s=this.dp.isWeekend,{onClickDayName:a}=this.opts,n=e,r=0;for(;r<7;){let e=n%7;t+=`<div class="${u("air-datepicker-body--day-name",{[i.cssClassWeekend]:s(e),"-clickable-":!!a})}" data-day-index='${e}'>${this.dp.locale.daysMin[e]}</div>`,r++,n++}return t}renderDayNames(){this.$names.innerHTML=this._getDayNamesHtml()}_generateCell(e){let{type:t,dp:i,opts:s}=this;return new C({type:t,dp:i,opts:s,date:e,body:this})}_generateCells(){T.getDatesFunction(this.type)(this.dp,(e=>{this.cells.push(this._generateCell(e))}))}show(){this.isVisible=!0,this.$el.classList.remove("-hidden-")}hide(){this.isVisible=!1,this.$el.classList.add("-hidden-")}destroyCells(){this.cells.forEach((e=>e.destroy())),this.cells=[],this.$cells.innerHTML=""}destroy(){this.destroyCells(),this.dp.off(i.eventChangeViewDate,this.onChangeViewDate),this.dp.off(i.eventChangeCurrentView,this.onChangeCurrentView)}static getDaysDates(e,t){let{viewDate:i,opts:{fixedHeight:s},locale:{firstDay:a}}=e,n=o(i),{year:r,month:l}=h(i),d=new Date(r,l,1),c=new Date(r,l,n),u=d.getDay()-a,p=6-c.getDay()+a;u=u<0?u+7:u,p=p>6?p-7:p;let m=function(e,t){let{year:i,month:s,date:a}=h(e);return new Date(i,s,a-t)}(d,u),v=n+u+p,g=m.getDate(),{year:D,month:y}=h(m),f=0;s&&(v=42);const w=[];for(;f<v;){let e=new Date(D,y,g+f);t&&t(e),w.push(e),f++}return w}static getMonthsDates(e,t){let{year:i}=e.parsedViewDate,s=0,a=[];for(;s<12;){const e=new Date(i,s);a.push(e),t&&t(e),s++}return a}static getYearsDates(e,t){let i=c(e.viewDate),s=i[0]-1,a=i[1]+1,n=s,r=[];for(;n<=a;){const e=new Date(n,0);r.push(e),t&&t(e),n++}return r}static getDatesFunction(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i.days;return{[i.days]:T.getDaysDates,[i.months]:T.getMonthsDates,[i.years]:T.getYearsDates}[e]}}function F(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class V{constructor(e){let{dp:t,opts:i}=e;F(this,"onClickNav",(e=>{let t=y(e.target,".air-datepicker-nav--action");if(!t)return;let i=t.dataset.action;this.dp[i]()})),F(this,"onChangeViewDate",(()=>{this.render(),this._resetNavStatus(),this.handleNavStatus()})),F(this,"onChangeCurrentView",(()=>{this.render(),this._resetNavStatus(),this.handleNavStatus()})),F(this,"onClickNavTitle",(()=>{this.dp.isFinalView||this.dp.up()})),F(this,"update",(()=>{let{prevHtml:e,nextHtml:t}=this.opts;this.$prev.innerHTML=e,this.$next.innerHTML=t,this._resetNavStatus(),this.render(),this.handleNavStatus()})),F(this,"renderDelay",(()=>{setTimeout(this.render)})),F(this,"render",(()=>{this.$title.innerHTML=this._getTitle(),function(e,t){for(let i in t)t[i]?e.classList.add(i):e.classList.remove(i)}(this.$title,{"-disabled-":this.dp.isFinalView})})),this.dp=t,this.opts=i,this.init()}init(){this._createElement(),this._buildBaseHtml(),this._defineDOM(),this.render(),this.handleNavStatus(),this._bindEvents(),this._bindDatepickerEvents()}_defineDOM(){this.$title=a(".air-datepicker-nav--title",this.$el),this.$prev=a('[data-action="prev"]',this.$el),this.$next=a('[data-action="next"]',this.$el)}_bindEvents(){this.$el.addEventListener("click",this.onClickNav),this.$title.addEventListener("click",this.onClickNavTitle)}_bindDatepickerEvents(){this.dp.on(i.eventChangeViewDate,this.onChangeViewDate),this.dp.on(i.eventChangeCurrentView,this.onChangeCurrentView),this.isNavIsFunction&&(this.dp.on(i.eventChangeSelectedDate,this.renderDelay),this.dp.opts.timepicker&&this.dp.on(i.eventChangeTime,this.render))}destroy(){this.dp.off(i.eventChangeViewDate,this.onChangeViewDate),this.dp.off(i.eventChangeCurrentView,this.onChangeCurrentView),this.isNavIsFunction&&(this.dp.off(i.eventChangeSelectedDate,this.renderDelay),this.dp.opts.timepicker&&this.dp.off(i.eventChangeTime,this.render))}_createElement(){this.$el=n({tagName:"nav",className:"air-datepicker-nav"})}_getTitle(){let{dp:e,opts:t}=this,i=t.navTitles[e.currentView];return"function"==typeof i?i(e):e.formatDate(e.viewDate,i)}handleNavStatus(){let{disableNavWhenOutOfRange:e}=this.opts,{minDate:t,maxDate:s}=this.dp;if(!t&&!s||!e)return;let{year:a,month:n}=this.dp.parsedViewDate,r=!!t&&h(t),o=!!s&&h(s);switch(this.dp.currentView){case i.days:t&&r.month>=n&&r.year>=a&&this._disableNav("prev"),s&&o.month<=n&&o.year<=a&&this._disableNav("next");break;case i.months:t&&r.year>=a&&this._disableNav("prev"),s&&o.year<=a&&this._disableNav("next");break;case i.years:{let e=c(this.dp.viewDate);t&&r.year>=e[0]&&this._disableNav("prev"),s&&o.year<=e[1]&&this._disableNav("next");break}}}_disableNav(e){a('[data-action="'+e+'"]',this.$el).classList.add("-disabled-")}_resetNavStatus(){!function(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),s=1;s<t;s++)i[s-1]=arguments[s];e.length?e.forEach((e=>{e.classList.remove(...i)})):e.classList.remove(...i)}(this.$el.querySelectorAll(".air-datepicker-nav--action"),"-disabled-")}_buildBaseHtml(){let{prevHtml:e,nextHtml:t}=this.opts;this.$el.innerHTML=`<div class="air-datepicker-nav--action" data-action="prev">${e}</div><div class="air-datepicker-nav--title"></div><div class="air-datepicker-nav--action" data-action="next">${t}</div>`}get isNavIsFunction(){let{navTitles:e}=this.opts;return Object.keys(e).find((t=>"function"==typeof e[t]))}}var x={today:{content:e=>e.locale.today,onClick:e=>e.setViewDate(new Date)},clear:{content:e=>e.locale.clear,onClick:e=>e.clear()}};class H{constructor(e){let{dp:t,opts:i}=e;this.dp=t,this.opts=i,this.init()}init(){this.createElement(),this.render()}createElement(){this.$el=n({className:"air-datepicker-buttons"})}destroy(){this.$el.parentNode.removeChild(this.$el)}clearHtml(){return this.$el.innerHTML="",this}generateButtons(){let{buttons:e}=this.opts;Array.isArray(e)||(e=[e]),e.forEach((e=>{let t=e;"string"==typeof e&&x[e]&&(t=x[e]);let i=this.createButton(t);t.onClick&&this.attachEventToButton(i,t.onClick),this.$el.appendChild(i)}))}attachEventToButton(e,t){e.addEventListener("click",(()=>{t(this.dp)}))}createButton(e){let{content:t,className:i,tagName:s="button",attrs:a={}}=e;return n({tagName:s,innerHtml:`<span tabindex='-1'>${"function"==typeof t?t(this.dp):t}</span>`,className:u("air-datepicker-button",i),attrs:a})}render(){this.generateButtons()}}function E(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class L{constructor(){let{opts:e,dp:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};E(this,"toggleTimepickerIsActive",(e=>{this.dp.timepickerIsActive=e})),E(this,"onChangeSelectedDate",(e=>{let{date:t,updateTime:i=!1}=e;t&&(this.setMinMaxTime(t),this.setCurrentTime(!!i&&t),this.addTimeToDate(t))})),E(this,"onChangeLastSelectedDate",(e=>{e&&(this.setTime(e),this.render())})),E(this,"onChangeInputRange",(e=>{let t=e.target;this[t.getAttribute("name")]=t.value,this.updateText(),this.dp.trigger(i.eventChangeTime,{hours:this.hours,minutes:this.minutes})})),E(this,"onMouseEnterLeave",(e=>{let t=e.target.getAttribute("name"),i=this.$minutesText;"hours"===t&&(i=this.$hoursText),i.classList.toggle("-focus-")})),E(this,"onFocus",(()=>{this.toggleTimepickerIsActive(!0)})),E(this,"onBlur",(()=>{this.toggleTimepickerIsActive(!1)})),this.opts=e,this.dp=t;let{timeFormat:s}=this.dp.locale;s&&(s.match(k("h"))||s.match(k("hh")))&&(this.ampm=!0),this.init()}init(){this.setTime(this.dp.lastSelectedDate||this.dp.viewDate),this.createElement(),this.buildHtml(),this.defineDOM(),this.render(),this.bindDatepickerEvents(),this.bindDOMEvents()}bindDatepickerEvents(){this.dp.on(i.eventChangeSelectedDate,this.onChangeSelectedDate),this.dp.on(i.eventChangeLastSelectedDate,this.onChangeLastSelectedDate)}bindDOMEvents(){let e="input";navigator.userAgent.match(/trident/gi)&&(e="change"),D(this.$ranges,e,this.onChangeInputRange),D(this.$ranges,"mouseenter",this.onMouseEnterLeave),D(this.$ranges,"mouseleave",this.onMouseEnterLeave),D(this.$ranges,"focus",this.onFocus),D(this.$ranges,"mousedown",this.onFocus),D(this.$ranges,"blur",this.onBlur)}createElement(){this.$el=n({className:u("air-datepicker-time",{"-am-pm-":this.dp.ampm})})}destroy(){this.dp.off(i.eventChangeSelectedDate,this.onChangeSelectedDate),this.dp.off(i.eventChangeLastSelectedDate,this.onChangeLastSelectedDate),this.$el.parentNode.removeChild(this.$el)}buildHtml(){let{ampm:e,hours:t,displayHours:i,minutes:s,minHours:a,minMinutes:n,maxHours:r,maxMinutes:o,dayPeriod:h,opts:{hoursStep:l,minutesStep:c}}=this;this.$el.innerHTML=`<div class="air-datepicker-time--current">   <span class="air-datepicker-time--current-hours">${d(i)}</span>   <span class="air-datepicker-time--current-colon">:</span>   <span class="air-datepicker-time--current-minutes">${d(s)}</span>   `+(e?`<span class='air-datepicker-time--current-ampm'>${h}</span>`:"")+'</div><div class="air-datepicker-time--sliders">   <div class="air-datepicker-time--row">'+`      <input type="range" name="hours" value="${t}" min="${a}" max="${r}" step="${l}"/>   </div>   <div class="air-datepicker-time--row">`+`      <input type="range" name="minutes" value="${s}" min="${n}" max="${o}" step="${c}"/>   </div></div>`}defineDOM(){let e=e=>a(e,this.$el);this.$ranges=this.$el.querySelectorAll('[type="range"]'),this.$hours=e('[name="hours"]'),this.$minutes=e('[name="minutes"]'),this.$hoursText=e(".air-datepicker-time--current-hours"),this.$minutesText=e(".air-datepicker-time--current-minutes"),this.$ampm=e(".air-datepicker-time--current-ampm")}setTime(e){this.setMinMaxTime(e),this.setCurrentTime(e)}addTimeToDate(e){e&&(e.setHours(this.hours),e.setMinutes(this.minutes))}setMinMaxTime(e){if(this.setMinMaxTimeFromOptions(),e){let{minDate:t,maxDate:i}=this.dp;t&&p(e,t)&&this.setMinTimeFromMinDate(t),i&&p(e,i)&&this.setMaxTimeFromMaxDate(i)}}setCurrentTime(e){let{hours:t,minutes:i}=e?h(e):this;this.hours=f(t,this.minHours,this.maxHours),this.minutes=f(i,this.minMinutes,this.maxMinutes)}setMinMaxTimeFromOptions(){let{minHours:e,minMinutes:t,maxHours:i,maxMinutes:s}=this.opts;this.minHours=f(e,0,23),this.minMinutes=f(t,0,59),this.maxHours=f(i,0,23),this.maxMinutes=f(s,0,59)}setMinTimeFromMinDate(e){let{lastSelectedDate:t}=this.dp;this.minHours=e.getHours(),t&&t.getHours()>e.getHours()?this.minMinutes=this.opts.minMinutes:this.minMinutes=e.getMinutes()}setMaxTimeFromMaxDate(e){let{lastSelectedDate:t}=this.dp;this.maxHours=e.getHours(),t&&t.getHours()<e.getHours()?this.maxMinutes=this.opts.maxMinutes:this.maxMinutes=e.getMinutes()}updateSliders(){r(this.$hours,{min:this.minHours,max:this.maxHours}).value=this.hours,r(this.$minutes,{min:this.minMinutes,max:this.maxMinutes}).value=this.minutes}updateText(){this.$hoursText.innerHTML=d(this.displayHours),this.$minutesText.innerHTML=d(this.minutes),this.ampm&&(this.$ampm.innerHTML=this.dayPeriod)}set hours(e){this._hours=e;let{hours:t,dayPeriod:i}=l(e);this.displayHours=this.ampm?t:e,this.dayPeriod=i}get hours(){return this._hours}render(){this.updateSliders(),this.updateText()}}function O(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class A{constructor(e){let{dp:t,opts:i}=e;O(this,"pressedKeys",new Set),O(this,"hotKeys",new Map([[[["Control","ArrowRight"],["Control","ArrowUp"]],e=>e.month++],[[["Control","ArrowLeft"],["Control","ArrowDown"]],e=>e.month--],[[["Shift","ArrowRight"],["Shift","ArrowUp"]],e=>e.year++],[[["Shift","ArrowLeft"],["Shift","ArrowDown"]],e=>e.year--],[[["Alt","ArrowRight"],["Alt","ArrowUp"]],e=>e.year+=10],[[["Alt","ArrowLeft"],["Alt","ArrowDown"]],e=>e.year-=10],[["Control","Shift","ArrowUp"],(e,t)=>t.up()]])),O(this,"handleHotKey",(e=>{let t=this.hotKeys.get(e),i=h(this.getInitialFocusDate());t(i,this.dp);let{year:s,month:a,date:n}=i,r=o(new Date(s,a));r<n&&(n=r);let l=this.dp.getClampedDate(new Date(s,a,n));this.dp.setFocusDate(l,{viewDateTransition:!0})})),O(this,"isHotKeyPressed",(()=>{let e=!1,t=this.pressedKeys.size,i=e=>this.pressedKeys.has(e);for(let[s]of this.hotKeys){if(e)break;if(Array.isArray(s[0]))s.forEach((a=>{e||t!==a.length||(e=a.every(i)&&s)}));else{if(t!==s.length)continue;e=s.every(i)&&s}}return e})),O(this,"isArrow",(e=>e>=37&&e<=40)),O(this,"onKeyDown",(e=>{let{key:t,which:i}=e,{dp:s,dp:{focusDate:a},opts:n}=this;this.registerKey(t);let r=this.isHotKeyPressed();if(r)return e.preventDefault(),void this.handleHotKey(r);if(this.isArrow(i))return e.preventDefault(),void this.focusNextCell(t);if("Enter"===t){if(s.currentView!==n.minView)return void s.down();if(a){let e=s._checkIfDateIsSelected(a);return void(e?s._handleAlreadySelectedDates(e,a):s.selectDate(a))}}"Escape"===t&&this.dp.hide()})),O(this,"onKeyUp",(e=>{this.removeKey(e.key)})),this.dp=t,this.opts=i,this.init()}init(){this.bindKeyboardEvents()}bindKeyboardEvents(){let{$el:e}=this.dp;e.addEventListener("keydown",this.onKeyDown),e.addEventListener("keyup",this.onKeyUp)}destroy(){let{$el:e}=this.dp;e.removeEventListener("keydown",this.onKeyDown),e.removeEventListener("keyup",this.onKeyUp),this.hotKeys=null,this.pressedKeys=null}getInitialFocusDate(){let{focusDate:e,currentView:t,selectedDates:s,parsedViewDate:{year:a,month:n}}=this.dp,r=e||s[s.length-1];if(!r)switch(t){case i.days:r=new Date(a,n,(new Date).getDate());break;case i.months:r=new Date(a,n,1);break;case i.years:r=new Date(a,0,1)}return r}focusNextCell(e){let t=this.getInitialFocusDate(),{currentView:s}=this.dp,{days:a,months:n,years:r}=i,o=h(t),l=o.year,d=o.month,c=o.date;switch(e){case"ArrowLeft":s===a&&(c-=1),s===n&&(d-=1),s===r&&(l-=1);break;case"ArrowUp":s===a&&(c-=7),s===n&&(d-=3),s===r&&(l-=4);break;case"ArrowRight":s===a&&(c+=1),s===n&&(d+=1),s===r&&(l+=1);break;case"ArrowDown":s===a&&(c+=7),s===n&&(d+=3),s===r&&(l+=4)}let u=this.dp.getClampedDate(new Date(l,d,c));this.dp.setFocusDate(u,{viewDateTransition:!0})}registerKey(e){this.pressedKeys.add(e)}removeKey(e){this.pressedKeys.delete(e)}}let N={on(e,t){this.__events||(this.__events={}),this.__events[e]?this.__events[e].push(t):this.__events[e]=[t]},off(e,t){this.__events&&this.__events[e]&&(this.__events[e]=this.__events[e].filter((e=>e!==t)))},removeAllEvents(){this.__events={}},trigger(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),s=1;s<t;s++)i[s-1]=arguments[s];this.__events&&this.__events[e]&&this.__events[e].forEach((e=>{e(...i)}))}};function I(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}let P="",j="",B=!1;class R{static buildGlobalContainer(e){B=!0,P=n({className:e,id:e}),a("body").appendChild(P)}constructor(e,t){var r=this;if(I(this,"viewIndexes",[i.days,i.months,i.years]),I(this,"next",(()=>{let{year:e,month:t}=this.parsedViewDate;switch(this.currentView){case i.days:this.setViewDate(new Date(e,t+1,1));break;case i.months:this.setViewDate(new Date(e+1,t,1));break;case i.years:this.setViewDate(new Date(e+10,0,1))}})),I(this,"prev",(()=>{let{year:e,month:t}=this.parsedViewDate;switch(this.currentView){case i.days:this.setViewDate(new Date(e,t-1,1));break;case i.months:this.setViewDate(new Date(e-1,t,1));break;case i.years:this.setViewDate(new Date(e-10,0,1))}})),I(this,"_finishHide",(()=>{this.hideAnimation=!1,this._destroyComponents(),this.$container.removeChild(this.$datepicker)})),I(this,"setPosition",(function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("function"==typeof(e=e||r.opts.position))return void(r.customHide=e({$datepicker:r.$datepicker,$target:r.$el,$pointer:r.$pointer,isViewChange:t,done:r._finishHide}));let i,s,{isMobile:a}=r.opts,n=r.$el.getBoundingClientRect(),o=r.$el.getBoundingClientRect(),h=r.$datepicker.offsetParent,l=r.$el.offsetParent,d=r.$datepicker.getBoundingClientRect(),c=e.split(" "),u=window.scrollY,p=window.scrollX,m=r.opts.offset,v=c[0],g=c[1];if(a)r.$datepicker.style.cssText="left: 50%; top: 50%";else{if(h===l&&h!==document.body&&(o={top:r.$el.offsetTop,left:r.$el.offsetLeft,width:n.width,height:r.$el.offsetHeight},u=0,p=0),h!==l&&h!==document.body){let e=h.getBoundingClientRect();o={top:n.top-e.top,left:n.left-e.left,width:n.width,height:n.height},u=0,p=0}switch(v){case"top":i=o.top-d.height-m;break;case"right":s=o.left+o.width+m;break;case"bottom":i=o.top+o.height+m;break;case"left":s=o.left-d.width-m}switch(g){case"top":i=o.top;break;case"right":s=o.left+o.width-d.width;break;case"bottom":i=o.top+o.height-d.height;break;case"left":s=o.left;break;case"center":/left|right/.test(v)?i=o.top+o.height/2-d.height/2:s=o.left+o.width/2-d.width/2}r.$datepicker.style.cssText=`left: ${s+p}px; top: ${i+u}px`}})),I(this,"_setInputValue",(()=>{let{opts:e,$altField:t,locale:{dateFormat:i}}=this,{altFieldDateFormat:s,altField:a}=e;a&&t&&(t.value=this._getInputValue(s)),this.$el.value=this._getInputValue(i)})),I(this,"_getInputValue",(e=>{let{selectedDates:t,opts:i}=this,{multipleDates:s,multipleDatesSeparator:a}=i;if(!t.length)return"";let n="function"==typeof e,r=n?e(s?t:t[0]):t.map((t=>this.formatDate(t,e)));return r=n?r:r.join(a),r})),I(this,"_checkIfDateIsSelected",(function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i.days,s=!1;return r.selectedDates.some((i=>{let a=p(e,i,t);return s=a&&i,a})),s})),I(this,"_scheduleCallAfterTransition",(e=>{this._cancelScheduledCall(),e&&e(!1),this._onTransitionEnd=()=>{e&&e(!0)},this.$datepicker.addEventListener("transitionend",this._onTransitionEnd,{once:!0})})),I(this,"_cancelScheduledCall",(()=>{this.$datepicker.removeEventListener("transitionend",this._onTransitionEnd)})),I(this,"setViewDate",(e=>{if(!((e=b(e))instanceof Date))return;if(p(e,this.viewDate))return;let t=this.viewDate;this.viewDate=e;let{onChangeViewDate:s}=this.opts;if(s){let{month:e,year:t}=this.parsedViewDate;s({month:e,year:t,decade:this.curDecade})}this.trigger(i.eventChangeViewDate,e,t)})),I(this,"setFocusDate",(function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(!e||(e=b(e))instanceof Date)&&(r.focusDate=e,r.trigger(i.eventChangeFocusDate,e,t))})),I(this,"setCurrentView",(function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(r.viewIndexes.includes(e)){if(r.currentView=e,r.elIsInput&&r.visible&&r.setPosition(void 0,!0),r.trigger(i.eventChangeCurrentView,e),!r.views[e]){let t=r.views[e]=new T({dp:r,opts:r.opts,type:e});r.shouldUpdateDOM&&r.$content.appendChild(t.$el)}r.opts.onChangeView&&!t.silent&&r.opts.onChangeView(e)}})),I(this,"_updateLastSelectedDate",(e=>{this.lastSelectedDate=e,this.trigger(i.eventChangeLastSelectedDate,e)})),I(this,"destroy",(()=>{if(this.isDestroyed)return;let{showEvent:e,isMobile:t}=this.opts,i=this.$datepicker.parentNode;i&&i.removeChild(this.$datepicker),this.$el.removeEventListener(e,this._onFocus),this.$el.removeEventListener("blur",this._onBlur),window.removeEventListener("resize",this._onResize),t&&this._removeMobileAttributes(),this.keyboardNav&&this.keyboardNav.destroy(),this.views=null,this.nav=null,this.$datepicker=null,this.opts={},this.$customContainer=null,this.viewDate=null,this.focusDate=null,this.selectedDates=[],this.rangeDateFrom=null,this.rangeDateTo=null,this.isDestroyed=!0})),I(this,"update",(function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=w({},r.opts),{silent:a}=t;w(r.opts,e);let{timepicker:n,buttons:o,range:h,selectedDates:l,isMobile:d}=r.opts,c=r.visible||r.treatAsInline;r._createMinMaxDates(),r._limitViewDateByMaxMinDates(),r._handleLocale(),l&&(r.selectedDates=[],r.selectDate(l,{silent:a})),e.view&&r.setCurrentView(e.view,{silent:a}),r._setInputValue(),s.range&&!h?(r.rangeDateTo=!1,r.rangeDateFrom=!1):!s.range&&h&&r.selectedDates.length&&(r.rangeDateFrom=r.selectedDates[0],r.rangeDateTo=r.selectedDates[1]),s.timepicker&&!n?(c&&r.timepicker.destroy(),r.timepicker=!1,r.$timepicker.parentNode.removeChild(r.$timepicker)):!s.timepicker&&n&&r._addTimepicker(),!s.buttons&&o?r._addButtons():s.buttons&&!o?(r.buttons.destroy(),r.$buttons.parentNode.removeChild(r.$buttons)):c&&s.buttons&&o&&r.buttons.clearHtml().render(),!s.isMobile&&d?(r.treatAsInline||j||r._createMobileOverlay(),r._addMobileAttributes(),r.visible&&r._showMobileOverlay()):s.isMobile&&!d&&(r._removeMobileAttributes(),r.visible&&(j.classList.remove("-active-"),"function"!=typeof r.opts.position&&r.setPosition())),c&&(r.nav.update(),r.views[r.currentView].render(),r.currentView===i.days&&r.views[r.currentView].renderDayNames())})),I(this,"disableDate",((e,t)=>{(Array.isArray(e)?e:[e]).forEach((e=>{let i=b(e);if(!i)return;let s=t?"delete":"add";this.disabledDates[s](this.formatDate(i,"yyyy-MM-dd"));let a=this.getCell(i,this.currentViewSingular);a&&a.adpCell.render()}),[])})),I(this,"enableDate",(e=>{this.disableDate(e,!0)})),I(this,"isDateDisabled",(e=>{let t=b(e);return this.disabledDates.has(this.formatDate(t,"yyyy-MM-dd"))})),I(this,"isOtherMonth",(e=>{let{month:t}=h(e);return t!==this.parsedViewDate.month})),I(this,"isOtherYear",(e=>{let{year:t}=h(e);return t!==this.parsedViewDate.year})),I(this,"isOtherDecade",(e=>{let{year:t}=h(e),[i,s]=c(this.viewDate);return t<i||t>s})),I(this,"_onChangeSelectedDate",(e=>{let{silent:t}=e;setTimeout((()=>{this._setInputValue(),this.opts.onSelect&&!t&&this._triggerOnSelect()}))})),I(this,"_onChangeFocusedDate",(function(e){let{viewDateTransition:t}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e)return;let i=!1;t&&(i=r.isOtherMonth(e)||r.isOtherYear(e)||r.isOtherDecade(e)),i&&r.setViewDate(e),r.opts.onFocus&&r.opts.onFocus({datepicker:r,date:e})})),I(this,"_onChangeTime",(e=>{let{hours:t,minutes:i}=e,s=new Date,{lastSelectedDate:a,opts:{onSelect:n}}=this,r=a;a||(r=s);let o=this.getCell(r,this.currentViewSingular),h=o&&o.adpCell;h&&h.isDisabled||(r.setHours(t),r.setMinutes(i),a?(this._setInputValue(),n&&this._triggerOnSelect()):this.selectDate(r))})),I(this,"_onFocus",(e=>{this.visible||this.show()})),I(this,"_onBlur",(e=>{this.inFocus||!this.visible||this.opts.isMobile||this.hide()})),I(this,"_onMouseDown",(e=>{this.inFocus=!0})),I(this,"_onMouseUp",(e=>{this.inFocus=!1,this.$el.focus()})),I(this,"_onResize",(()=>{this.visible&&"function"!=typeof this.opts.position&&this.setPosition()})),I(this,"_onClickOverlay",(()=>{this.visible&&this.hide()})),I(this,"getViewDates",(function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i.days;return T.getDatesFunction(e)(r)})),I(this,"isWeekend",(e=>this.opts.weekends.includes(e))),I(this,"getClampedDate",(e=>{let{minDate:t,maxDate:i}=this,s=e;return i&&m(e,i)?s=i:t&&v(e,t)&&(s=t),s})),this.$el=a(e),!this.$el)return;this.$datepicker=n({className:"air-datepicker"}),this.opts=w({},s,t),this.$customContainer=!!this.opts.container&&a(this.opts.container),this.$altField=a(this.opts.altField||!1);let{view:o,startDate:l}=this.opts;l||(this.opts.startDate=new Date),"INPUT"===this.$el.nodeName&&(this.elIsInput=!0),this.inited=!1,this.visible=!1,this.viewDate=b(this.opts.startDate),this.focusDate=!1,this.initialReadonly=this.$el.getAttribute("readonly"),this.customHide=!1,this.currentView=o,this.selectedDates=[],this.disabledDates=new Set,this.isDestroyed=!1,this.views={},this.keys=[],this.rangeDateFrom="",this.rangeDateTo="",this.timepickerIsActive=!1,this.treatAsInline=this.opts.inline||!this.elIsInput,this.init()}init(){let{opts:e,treatAsInline:t,opts:{inline:i,isMobile:s,selectedDates:n,keyboardNav:r,onlyTimepicker:o}}=this,h=a("body");(!B||B&&P&&!h.contains(P))&&!i&&this.elIsInput&&!this.$customContainer&&R.buildGlobalContainer(R.defaultGlobalContainerId),!s||j||t||this._createMobileOverlay(),this._handleLocale(),this._bindSubEvents(),this._createMinMaxDates(),this._limitViewDateByMaxMinDates(),this.elIsInput&&(i||this._bindEvents(),r&&!o&&(this.keyboardNav=new A({dp:this,opts:e}))),n&&this.selectDate(n,{silent:!0}),this.opts.visible&&!t&&this.show(),s&&!t&&this.$el.setAttribute("readonly",!0),t&&this._createComponents()}_createMobileOverlay(){j=n({className:"air-datepicker-overlay"}),P.appendChild(j)}_createComponents(){let{opts:e,treatAsInline:t,opts:{inline:i,buttons:s,timepicker:a,position:n,classes:r,onlyTimepicker:o,isMobile:h}}=this;this._buildBaseHtml(),this.elIsInput&&(i||this._setPositionClasses(n)),!i&&this.elIsInput||this.$datepicker.classList.add("-inline-"),r&&this.$datepicker.classList.add(...r.split(" ")),o&&this.$datepicker.classList.add("-only-timepicker-"),h&&!t&&this._addMobileAttributes(),this.views[this.currentView]=new T({dp:this,type:this.currentView,opts:e}),this.nav=new V({dp:this,opts:e}),a&&this._addTimepicker(),s&&this._addButtons(),this.$content.appendChild(this.views[this.currentView].$el),this.$nav.appendChild(this.nav.$el)}_destroyComponents(){for(let e in this.views)this.views[e].destroy();this.views={},this.nav.destroy(),this.timepicker&&this.timepicker.destroy()}_addMobileAttributes(){j.addEventListener("click",this._onClickOverlay),this.$datepicker.classList.add("-is-mobile-"),this.$el.setAttribute("readonly",!0)}_removeMobileAttributes(){j.removeEventListener("click",this._onClickOverlay),this.$datepicker.classList.remove("-is-mobile-"),this.initialReadonly||""===this.initialReadonly||this.$el.removeAttribute("readonly")}_createMinMaxDates(){let{minDate:e,maxDate:t}=this.opts;this.minDate=!!e&&b(e),this.maxDate=!!t&&b(t)}_addTimepicker(){this.$timepicker=n({className:"air-datepicker--time"}),this.$datepicker.appendChild(this.$timepicker),this.timepicker=new L({dp:this,opts:this.opts}),this.$timepicker.appendChild(this.timepicker.$el)}_addButtons(){this.$buttons=n({className:"air-datepicker--buttons"}),this.$datepicker.appendChild(this.$buttons),this.buttons=new H({dp:this,opts:this.opts}),this.$buttons.appendChild(this.buttons.$el)}_bindSubEvents(){this.on(i.eventChangeSelectedDate,this._onChangeSelectedDate),this.on(i.eventChangeFocusDate,this._onChangeFocusedDate),this.on(i.eventChangeTime,this._onChangeTime)}_buildBaseHtml(){let{inline:e}=this.opts;var t,i;this.elIsInput?e?(t=this.$datepicker,(i=this.$el).parentNode.insertBefore(t,i.nextSibling)):this.$container.appendChild(this.$datepicker):this.$el.appendChild(this.$datepicker),this.$datepicker.innerHTML='<i class="air-datepicker--pointer"></i><div class="air-datepicker--navigation"></div><div class="air-datepicker--content"></div>',this.$content=a(".air-datepicker--content",this.$datepicker),this.$pointer=a(".air-datepicker--pointer",this.$datepicker),this.$nav=a(".air-datepicker--navigation",this.$datepicker)}_handleLocale(){let{locale:e,dateFormat:t,firstDay:i,timepicker:s,onlyTimepicker:a,timeFormat:n,dateTimeSeparator:r}=this.opts;var o;this.locale=(o=e,JSON.parse(JSON.stringify(o))),t&&(this.locale.dateFormat=t),void 0!==n&&""!==n&&(this.locale.timeFormat=n);let{timeFormat:h}=this.locale;if(""!==i&&(this.locale.firstDay=i),s&&"function"!=typeof t){let e=h?r:"";this.locale.dateFormat=[this.locale.dateFormat,h||""].join(e)}a&&"function"!=typeof t&&(this.locale.dateFormat=this.locale.timeFormat)}_setPositionClasses(e){if("function"==typeof e)return void this.$datepicker.classList.add("-custom-position-");let t=(e=e.split(" "))[0],i=`air-datepicker -${t}-${e[1]}- -from-${t}-`;this.$datepicker.classList.add(...i.split(" "))}_bindEvents(){this.$el.addEventListener(this.opts.showEvent,this._onFocus),this.$el.addEventListener("blur",this._onBlur),this.$datepicker.addEventListener("mousedown",this._onMouseDown),this.$datepicker.addEventListener("mouseup",this._onMouseUp),window.addEventListener("resize",this._onResize)}_limitViewDateByMaxMinDates(){let{viewDate:e,minDate:t,maxDate:i}=this;i&&m(e,i)&&this.setViewDate(i),t&&v(e,t)&&this.setViewDate(t)}formatDate(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.viewDate,t=arguments.length>1?arguments[1]:void 0;if(e=b(e),!(e instanceof Date))return;let i=t,s=this.locale,a=h(e),n=a.dayPeriod,r=c(e),o=R.replacer,l={T:e.getTime(),m:a.minutes,mm:a.fullMinutes,h:a.hours12,hh:a.fullHours12,H:a.hours,HH:a.fullHours,aa:n,AA:n.toUpperCase(),E:s.daysShort[a.day],EEEE:s.days[a.day],d:a.date,dd:a.fullDate,M:a.month+1,MM:a.fullMonth,MMM:s.monthsShort[a.month],MMMM:s.months[a.month],yy:a.year.toString().slice(-2),yyyy:a.year,yyyy1:r[0],yyyy2:r[1]};for(let[e,t]of Object.entries(l))i=o(i,k(e),t);return i}down(e){this._handleUpDownActions(e,"down")}up(e){this._handleUpDownActions(e,"up")}selectDate(e){let t,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{currentView:a,parsedViewDate:n,selectedDates:r}=this,{updateTime:o}=s,{moveToOtherMonthsOnSelect:h,moveToOtherYearsOnSelect:l,multipleDates:d,range:c,autoClose:u,onBeforeSelect:p}=this.opts,v=r.length;if(Array.isArray(e))return e.forEach((e=>{this.selectDate(e,s)})),new Promise((e=>{setTimeout(e)}));if((e=b(e))instanceof Date){if(p&&!p({date:e,datepicker:this}))return Promise.resolve();if(a===i.days&&e.getMonth()!==n.month&&h&&(t=new Date(e.getFullYear(),e.getMonth(),1)),a===i.years&&e.getFullYear()!==n.year&&l&&(t=new Date(e.getFullYear(),0,1)),t&&this.setViewDate(t),d&&!c){if(v===d)return;this._checkIfDateIsSelected(e)||r.push(e)}else if(c)switch(v){case 1:r.push(e),this.rangeDateTo||(this.rangeDateTo=e),m(this.rangeDateFrom,this.rangeDateTo)&&(this.rangeDateTo=this.rangeDateFrom,this.rangeDateFrom=e),this.selectedDates=[this.rangeDateFrom,this.rangeDateTo];break;case 2:this.selectedDates=[e],this.rangeDateFrom=e,this.rangeDateTo="";break;default:this.selectedDates=[e],this.rangeDateFrom=e}else this.selectedDates=[e];return this.trigger(i.eventChangeSelectedDate,{action:i.actionSelectDate,silent:null==s?void 0:s.silent,date:e,updateTime:o}),this._updateLastSelectedDate(e),u&&!this.timepickerIsActive&&this.visible&&(d||c?c&&1===v&&this.hide():this.hide()),new Promise((e=>{setTimeout(e)}))}}unselectDate(e){let t=this.selectedDates,s=this;if((e=b(e))instanceof Date)return t.some(((a,n)=>{if(p(a,e))return t.splice(n,1),s.selectedDates.length?(s.rangeDateTo="",s.rangeDateFrom=t[0],s._updateLastSelectedDate(s.selectedDates[s.selectedDates.length-1])):(s.rangeDateFrom="",s.rangeDateTo="",s._updateLastSelectedDate(!1)),this.trigger(i.eventChangeSelectedDate,{action:i.actionUnselectDate,date:e}),!0}))}replaceDate(e,t){let s=this.selectedDates.find((t=>p(t,e,this.currentView))),a=this.selectedDates.indexOf(s);a<0||p(this.selectedDates[a],t,this.currentView)||(this.selectedDates[a]=t,this.trigger(i.eventChangeSelectedDate,{action:i.actionSelectDate,date:t,updateTime:!0}),this._updateLastSelectedDate(t))}clear(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.selectedDates=[],this.rangeDateFrom=!1,this.rangeDateTo=!1,this.lastSelectedDate=!1,this.trigger(i.eventChangeSelectedDate,{action:i.actionUnselectDate,silent:e.silent}),new Promise((e=>{setTimeout(e)}))}show(){let{onShow:e,isMobile:t}=this.opts;this._cancelScheduledCall(),this.visible||this.hideAnimation||this._createComponents(),this.setPosition(this.opts.position),this.$datepicker.classList.add("-active-"),this.visible=!0,e&&this._scheduleCallAfterTransition(e),t&&this._showMobileOverlay()}hide(){let{onHide:e,isMobile:t}=this.opts,i=this._hasTransition();this.visible=!1,this.hideAnimation=!0,this.$datepicker.classList.remove("-active-"),this.customHide&&this.customHide(),this.elIsInput&&this.$el.blur(),this._scheduleCallAfterTransition((t=>{!this.customHide&&(t&&i||!t&&!i)&&this._finishHide(),e&&e(t)})),t&&j.classList.remove("-active-")}_triggerOnSelect(){let e=[],t=[],{selectedDates:i,locale:s,opts:{onSelect:a,multipleDates:n,range:r}}=this,o=n||r,h="function"==typeof s.dateFormat;i.length&&(e=i.map(g),t=h?n?s.dateFormat(e):e.map((e=>s.dateFormat(e))):e.map((e=>this.formatDate(e,s.dateFormat)))),a({date:o?e:e[0],formattedDate:o?t:t[0],datepicker:this})}_handleAlreadySelectedDates(e,t){let{selectedDates:i,rangeDateFrom:s,rangeDateTo:a}=this,{range:n,toggleSelected:r}=this.opts,o=i.length,h="function"==typeof r?r({datepicker:this,date:t}):r,l=Boolean(n&&1===o&&e),d=l?g(t):t;n&&!h&&(2!==o&&this.selectDate(d),2===o&&p(s,a))||(h?this.unselectDate(d):this._updateLastSelectedDate(l?d:e))}_handleUpDownActions(e,t){if(!((e=b(e||this.focusDate||this.viewDate))instanceof Date))return;let i="up"===t?this.viewIndex+1:this.viewIndex-1;i>2&&(i=2),i<0&&(i=0),this.setViewDate(new Date(e.getFullYear(),e.getMonth(),1)),this.setCurrentView(this.viewIndexes[i])}getCell(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i.day;if(!((e=b(e))instanceof Date))return;let{year:s,month:a,date:n}=h(e),r=`[data-year="${s}"]`,o=`[data-month="${a}"]`,l={[i.day]:`${r}${o}[data-date="${n}"]`,[i.month]:`${r}${o}`,[i.year]:`${r}`};return this.views[this.currentView]?this.views[this.currentView].$el.querySelector(l[t]):void 0}_showMobileOverlay(){j.classList.add("-active-")}_hasTransition(){return window.getComputedStyle(this.$datepicker).getPropertyValue("transition-duration").split(", ").reduce(((e,t)=>parseFloat(t)+e),0)>0}get shouldUpdateDOM(){return this.visible||this.treatAsInline}get parsedViewDate(){return h(this.viewDate)}get currentViewSingular(){return this.currentView.slice(0,-1)}get curDecade(){return c(this.viewDate)}get viewIndex(){return this.viewIndexes.indexOf(this.currentView)}get isFinalView(){return this.currentView===i.years}get hasSelectedDates(){return this.selectedDates.length>0}get isMinViewReached(){return this.currentView===this.opts.minView||this.currentView===i.days}get $container(){return this.$customContainer||P}static replacer(e,t,i){return e.replace(t,(function(e,t,s,a){return t+i+a}))}}var K;return I(R,"defaults",s),I(R,"version","3.5.3"),I(R,"defaultGlobalContainerId","air-datepicker-global-container"),K=R.prototype,Object.assign(K,N),t.default}()}));
},{}],2:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _initAccordion = require("./modules/accordion/init-accordion");
var _initCalendar = require("./modules/calendar/init-calendar");
var _initSearch = require("./modules/search/init-search");
var _initSelect = require("./modules/select/init-select");
var _initSwitch = require("./modules/switch/init-switch");
var _initPasswordButton = require("./modules/password/init-password-button");
var _initFileUpload = require("./modules/file-upload/init-file-upload");
var _initMask = require("./modules/masks/init-mask");
var _initSortingTable = require("./modules/sorting-table/init-sorting-table");
var _index = require("./modules/club/index");
var _index2 = require("./modules/feedback/index");
var _niceSelect = _interopRequireDefault(require("./../js/vendor/nice-select2"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
window.addEventListener('DOMContentLoaded', function () {
  (0, _iosVhFix.iosVhFix)();
  var burger = document.querySelector('.burger');
  var menu = document.querySelector('.menu');
  burger.addEventListener('click', function () {
    menu.classList.toggle('show');
    menu.classList.toggle('hide');
    burger.classList.toggle('active');
    document.querySelector('body').classList.toggle('dark');
  });
  var bodyElement = document.body;
  function handleWindowResize() {
    var windowWidth = window.innerWidth;
    if (windowWidth >= 768) {
      bodyElement.classList.remove('dark');
      menu.classList.remove('show');
      menu.classList.add('hide');
      burger.classList.remove('active');
    }
  }
  window.addEventListener('resize', handleWindowResize);
  var selectedContainer = document.querySelector('.selected-items');
  var niceSelectInstance;
  function addToSelectedContainer(text, item, itemType) {
    if (selectedContainer) {
      if (selectedContainer.querySelector('[type="submit"]')) {
        selectedContainer.querySelector('[type="submit"]').classList.remove('visually-hidden');
      }
      if (itemType === 'radio' || itemType === 'region' || itemType === 'date') {
        removeExistingItem(itemType);
      }
      if (item.closest('[data-accordion="element"]')) {
        item.closest('[data-accordion="element"]').classList.add('is-active');
      }
      selectedContainer.classList.remove('visually-hidden');
      var selectedItem = document.createElement('div');
      selectedItem.classList.add('selected-item');
      selectedItem.dataset.text = text;
      selectedItem.dataset.itemType = itemType;
      if (itemType === 'date') {
        var selectedItemText = document.createElement('span');
        selectedItemText.textContent = text;
        selectedItem.appendChild(selectedItemText);
      } else {
        var _selectedItemText = document.createElement('span');
        _selectedItemText.textContent = text;
        selectedItem.appendChild(_selectedItemText);
      }
      var removeBtn = document.createElement('span');
      removeBtn.classList.add('remove-btn');
      var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
      svg.setAttribute('width', '10');
      svg.setAttribute('height', '10');
      svg.setAttribute('viewBox', '0 0 10 10');
      svg.setAttribute('fill', 'none');
      var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path.setAttribute('d', 'M1 1L9 9M9 1L1 9');
      svg.appendChild(path);
      removeBtn.appendChild(svg);
      removeBtn.addEventListener('click', function () {
        removeFromSelectedContainer(text, item, niceSelectInstance);
        if (itemType === 'text') {
          radioButtons.forEach(function (radio) {
            radio.checked = false;
            removeFromSelectedContainer(radio.parentNode.textContent.trim(), radio.parentNode, niceSelectInstance);
          });
        }
      });
      selectedItem.appendChild(removeBtn);
      selectedContainer.appendChild(selectedItem);
    }
  }
  function removeFromSelectedContainer(text, item, niceSelectInstance) {
    if (selectedContainer) {
      if (selectedContainer.querySelector('[type="submit"]')) {
        selectedContainer.querySelector('[type="submit"]').classList.remove('visually-hidden');
      }
      var selectedItems = selectedContainer.querySelectorAll('.selected-item');
      selectedItems.forEach(function (selectedItem) {
        if (selectedItem.dataset.text === text) {
          selectedItem.remove();
          if (item.querySelector('input[type="checkbox"]')) {
            item.querySelector('input[type="checkbox"]').checked = false;
          } else if (item.querySelector('input[type="radio"]')) {
            item.querySelector('input[type="radio"]').checked = false;
          } else if (item.querySelector('input[type="text"]')) {
            item.querySelector('input[type="text"]').value = '';
          }
          if (item.querySelector('#region')) {
            var region = item.querySelector('#region');
            region.selectedIndex = -1;
            niceSelectInstance.update();
            if (niceSelectInstance) {
              niceSelectInstance.update();
              document.querySelector('.nice-select').querySelector('.current').style.color = "";
            }
          }
          if (selectedContainer.children.length === 2) {
            selectedContainer.classList.add('visually-hidden');
          }
        }
      });
    }
  }
  function removeExistingItem(itemType) {
    if (selectedContainer) {
      var existingItems = selectedContainer.querySelectorAll(".selected-item[data-item-type=\"".concat(itemType, "\"]"));
      existingItems.forEach(function (item) {
        return item.remove();
      });
    }
  }

  //filter-modal
  var filtersToggle = document.querySelector('.competitions-list__filter-mobile-button');
  var filtersContainer = document.querySelector('.filters');
  var filtersClose = document.querySelector('.filters__button-close');
  if (filtersToggle) {
    filtersToggle.addEventListener('click', function () {
      filtersContainer.classList.toggle('active');
      document.querySelector('body').classList.toggle('dark-modal');
    });
    filtersClose.addEventListener('click', function () {
      filtersContainer.classList.remove('active');
      document.querySelector('body').classList.remove('dark-modal');
    });
  }
  window.addEventListener('resize', function () {
    var windowWidth = window.innerWidth;
    if (windowWidth >= 768 && filtersContainer) {
      filtersContainer.classList.remove('active');
      document.querySelector('body').classList.remove('dark-modal');
    }
  });

  //сортировка
  var sortToggle = document.querySelector('.competitions-list__sort-button');
  var sortOptions = document.querySelector('.competitions-list__sort-list');
  if (sortToggle && sortOptions) {
    sortToggle.addEventListener('click', function () {
      sortOptions.classList.toggle('active');
      sortToggle.querySelector('.arrow').classList.toggle('active');
    });
    if (sortOptions && sortOptions.querySelector('a.active').href.includes('sort=past')) {
      if (document.querySelector('.filter-dark-wrapper')) {
        document.querySelector('.filter-dark-wrapper').classList.add('visually-hidden');
      }
    }
    var sortLinks = sortOptions.querySelectorAll('a');
    sortLinks.forEach(function (link) {
      link.addEventListener('click', function (event) {
        var windowWidth = window.innerWidth;
        if (windowWidth < 1440) {
          sortOptions.classList.toggle('active');
          sortToggle.querySelector('.arrow').classList.toggle('active');
        }
        sortLinks.forEach(function (l) {
          return l.classList.remove('active');
        });
        event.target.classList.add('active');
      });
    });
  }
  window.addEventListener('resize', function () {
    var windowWidth = window.innerWidth;
    if (windowWidth >= 1440 && sortOptions) {
      sortOptions.classList.remove('active');
      sortToggle.querySelector('.arrow').classList.remove('active');
    }
  });
  window.addEventListener('resize', function () {
    var sortToggle = document.querySelector('.competitions-list__sort-button');
    var sortOptions = document.querySelector('.competitions-list__sort-list');
    var windowWidth = window.innerWidth;
    if (windowWidth >= 1440 && sortOptions) {
      sortOptions.classList.remove('active');
      sortToggle.querySelector('.arrow').classList.remove('active');
    }
  });

  //registration button
  var competitionsButtons = document.querySelectorAll('.competitions__buttons');
  competitionsButtons.forEach(function (button) {
    var buttonRegistration = button.querySelector('a').getAttribute('data-button-registration');
    var priceElement = button.querySelector('p');
    if (buttonRegistration == 'over' || buttonRegistration == 'registration-completed') {
      priceElement.style.display = 'none';
    } else if (buttonRegistration == 'registration-active') {
      priceElement.style.display = 'block';
    }
  });

  //textarea
  function autoGrow(el) {
    el.style.height = el.scrollHeight + 'px';
  }
  var textAreas = document.querySelectorAll('textarea');
  if (textAreas) {
    textAreas.forEach(function (textArea) {
      textArea.style.height = '36px';
      textArea.addEventListener('input', function () {
        autoGrow(this);
      });
    });
  }

  //filter search
  var filterInput = document.querySelector('.filter-input');
  var filterList = document.querySelectorAll('.filter-item:not(.filter-item--transparent)');
  var inputDate = document.querySelector('input[data-input="range-date"]');
  var radioButtons = document.querySelectorAll('input[type="radio"]');
  function setFormValues() {
    var urlParams = new URLSearchParams(window.location.search);
    urlParams.forEach(function (value, key) {
      var checkboxes = document.querySelectorAll('input[type="checkbox"][name="' + key + '"]');
      var radioButtons = document.querySelectorAll('input[type="radio"][name="' + key + '"]');
      checkboxes.forEach(function (checkbox) {
        if (checkbox.value === value) {
          checkbox.checked = true;
          addToSelectedContainer(checkbox.parentNode.textContent.trim(), checkbox.parentNode, 'checkbox');
        }
      });
      radioButtons.forEach(function (radioButton) {
        if (radioButton.value === value) {
          radioButton.checked = true;
          addToSelectedContainer(radioButton.parentNode.textContent.trim(), radioButton.parentNode, 'radio');
        }
      });
    });
    var inputDate = document.querySelector('input[data-input="range-date"]');
    var dateValue = urlParams.get('input-date');
    if (inputDate && dateValue) {
      inputDate.value = dateValue;
      addToSelectedContainer("\u0414\u0430\u0442\u0430: ".concat(dateValue), inputDate.parentNode, 'date');
    }
    var selectRegion = document.querySelector('select[name="region"]');
    var regionValue = urlParams.get('region');
    if (selectRegion) {
      niceSelectInstance = new _niceSelect.default(selectRegion, {
        searchable: true,
        placeholder: 'Регион/область',
        searchText: 'Начните поиск'
      });
      if (regionValue) {
        selectRegion.value = regionValue;
        niceSelectInstance.update();
        document.querySelector('.nice-select').querySelector('.current').style.color = "#2E2E2E";
        addToSelectedContainer(selectRegion.options[selectRegion.selectedIndex].text, selectRegion.parentNode, 'region');
      } else {
        selectRegion.value = '';
        niceSelectInstance.update();
        document.querySelector('.nice-select').querySelector('.current').style.color = "";
      }
      selectRegion.addEventListener('change', function () {
        if (selectRegion.value !== "") {
          document.querySelector('.nice-select').querySelector('.current').style.color = "#2E2E2E";
          addToSelectedContainer(selectRegion.options[selectRegion.selectedIndex].text, selectRegion.parentNode, 'region');
        } else {
          document.querySelector('.nice-select').querySelector('.current').style.color = "";
          selectRegion.value = '';
          removeFromSelectedContainer(selectRegion.options[selectRegion.selectedIndex].text, selectRegion.parentNode, niceSelectInstance);
        }
      });
    }
    if (filterList) {
      filterList.forEach(function (item) {
        var input = item.querySelector('input');
        if (input) {
          input.addEventListener('change', function () {
            var text = item.textContent.trim();
            if (input.checked) {
              addToSelectedContainer(text, item, input.type);
              if (input.type === 'radio') {
                removeFromSelectedContainer("\u0414\u0430\u0442\u0430: ".concat(inputDate.value), inputDate.parentNode, niceSelectInstance);
              }
            } else {
              removeFromSelectedContainer(text, item, niceSelectInstance);
            }
          });
        }
      });
    }
    var textInput = document.querySelector('.filter-input');
    if (textInput && textInput.value && selectedContainer) {
      selectedContainer.classList.remove('visually-hidden');
      addToSelectedContainer(textInput.value, textInput.parentElement, 'text');
    }
    if (selectedContainer && selectedContainer.querySelector('[type="submit"]')) {
      selectedContainer.querySelector('[type="submit"]').classList.add('visually-hidden');
    }
  }
  window.addEventListener('load', setFormValues);

  //filter reset
  var select = document.getElementById('region');
  var resetButton = document.querySelector('.selected-container button[type="reset"]');
  if (resetButton) {
    resetButton.addEventListener('click', function (event) {
      var forms = document.querySelectorAll('form');
      forms.forEach(function (form) {
        console.log(form.querySelectorAll('input'));
        form.querySelectorAll('input').forEach(function (i) {
          return i.value = "";
        });
        event.preventDefault();
        form.reset();
        select.value = '';
        if (select) {
          select.value = "";
          select.selectedIndex = -1;
          if (niceSelectInstance) {
            niceSelectInstance.update();
            document.querySelector('.nice-select').querySelector('.current').style.color = "";
          }
        }
      });
      var checkboxes = document.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(function (checkbox) {
        checkbox.checked = false;
      });
      var radioInputs = document.querySelectorAll('input[type="radio"]');
      radioInputs.forEach(function (radioInput) {
        radioInput.checked = false;
      });
      selectedContainer.classList.add('visually-hidden');
      var selectedItems = selectedContainer.querySelectorAll('.selected-item');
      selectedItems.forEach(function (i) {
        return i.remove();
      });
    });
  }

  //filter item accordion
  setTimeout((0, _initAccordion.initAccordions)(), 1000);

  //фильтрация каталога
  var competitionItems = document.querySelectorAll('.competitions__item');
  var dateInput = document.querySelector('input[data-input="range-date"]');
  var pagination = document.querySelector('.pagination');
  var suggestionList = document.getElementById('suggestion-list');
  var competitionTitles = Array.from(document.querySelectorAll('.competitions__title')).map(function (title) {
    return title.textContent;
  });
  if (filterInput) {
    filterInput.addEventListener('input', function () {
      var filterText = this.value.toLowerCase();
      suggestionList.innerHTML = '';
      var matchingTitles = competitionTitles.filter(function (title) {
        return title.toLowerCase().includes(filterText);
      });
      if (matchingTitles.length > 0) {
        matchingTitles.forEach(function (title) {
          var originalTitle = competitionTitles[competitionTitles.indexOf(title)];
          var suggestionItem = document.createElement('div');
          suggestionItem.classList.add('suggestion-item');
          suggestionItem.textContent = originalTitle;
          suggestionItem.addEventListener('click', function () {
            filterInput.value = title;
            suggestionList.style.display = 'none';
          });
          suggestionList.appendChild(suggestionItem);
        });
        suggestionList.style.display = 'block';
      } else {
        suggestionList.style.display = 'none';
      }
    });
  }

  //календарь
  (0, _initCalendar.createCalendar)();

  //клик на построннюю область
  document.addEventListener('click', function (event) {
    if (suggestionList) {
      if (!event.target.closest('.filter-container')) {
        suggestionList.style.display = 'none';
      }
    }
    if (document.querySelector('.competitions-list__sort-list')) {
      if (!event.target.closest('.competitions-list__sort-list') && !event.target.closest('.competitions-list__sort-button')) {
        document.querySelector('.competitions-list__sort-list').classList.remove('active');
        document.querySelector('.competitions-list__sort-button .arrow').classList.remove('active');
      }
    }
    if (document.querySelector('.menu')) {
      if (!event.target.closest('.menu') && !event.target.closest('header')) {
        document.querySelector('.menu').classList.remove('show');
        document.querySelector('body').classList.remove('dark');
        document.querySelector('.burger').classList.remove('active');
      }
    }
  });

  //Получаем элемент information-modal
  var informationModal = document.querySelector('.information-modal');
  var isModalVisible = true;
  var prevScrollPos = window.pageYOffset;
  var hiddenModalTop = 0;
  if (informationModal) {
    window.addEventListener('scroll', openInformationModal);
    window.addEventListener('load', openInformationModal);
    window.addEventListener('resize', openInformationModal);
  }
  function openInformationModal() {
    var modalHeight = informationModal.offsetHeight;
    var modalTop = informationModal.getBoundingClientRect().top;
    var modalTopStart = informationModal.getBoundingClientRect().top;
    var windowWidth = window.innerWidth;
    var currentScrollPos = window.pageYOffset;
    var windowHeight = window.innerHeight;
    if (informationModal) {
      if (modalTop + modalHeight < windowHeight) {
        informationModal.classList.add('none');
        isModalVisible = false;
      }
      if (windowWidth < 768) {
        if (currentScrollPos > prevScrollPos && modalTop + modalHeight <= windowHeight) {
          hiddenModalTop = modalTop;
          informationModal.classList.add('none');
          isModalVisible = false;
        } else if (currentScrollPos <= modalTopStart) {
          informationModal.classList.remove('none');
          isModalVisible = true;
        }
        prevScrollPos = currentScrollPos;
        modalTop = informationModal.getBoundingClientRect().top;
      } else {
        informationModal.classList.remove('none');
        isModalVisible = true;
      }
    }
  }
  window.addEventListener('resize', closeModal);
  function closeModal() {
    var windowWidth = window.innerWidth;
    if (windowWidth >= 768 && document.querySelector('.information-modal')) {
      document.querySelector('.information-modal').classList.remove('mobile-modal');
      document.querySelector('body').classList.remove('dark-modal');
    }
  }
  var moreButton = document.querySelector('.information-modal__more');
  if (moreButton) {
    moreButton.addEventListener('click', function () {
      document.querySelector('.information-modal').classList.add('mobile-modal');
      document.querySelector('body').classList.add('dark-modal');
    });
  }
  var closeModalButton = document.querySelector('.information-modal__close');
  if (closeModalButton) {
    closeModalButton.addEventListener('click', function () {
      document.querySelector('.information-modal').classList.remove('mobile-modal');
      document.querySelector('body').classList.remove('dark-modal');
    });
  }
  var disabledSlot = document.querySelector('[data-state="disabled"]');
  if (disabledSlot) {
    disabledSlot.parentElement.style.backgroundColor = "#f3f4f6";
  }
  var buttonLike = document.querySelector('[data-button="add-like"]');
  if (buttonLike) {
    buttonLike.addEventListener('click', function (event) {
      event.preventDefault();
      if (buttonLike.parentElement.parentElement.getAttribute('data-like') === 'true') {
        buttonLike.parentElement.parentElement.setAttribute('data-like', 'false');
      } else {
        buttonLike.parentElement.parentElement.setAttribute('data-like', 'true');
      }
    });
  }

  //lazy load
  function addLazyLoadingToImages() {
    var images = document.querySelectorAll('img');
    if (images) {
      images.forEach(function (img) {
        img.setAttribute('loading', 'lazy');
      });
    }
    var sources = document.querySelectorAll('source');
    if (sources) {
      sources.forEach(function (source) {
        source.setAttribute('loading', 'lazy');
      });
    }
    var iframes = document.querySelectorAll('source');
    if (iframes) {
      iframes.forEach(function (iframe) {
        iframe.setAttribute('loading', 'lazy');
      });
    }
  }
  window.addEventListener('load', addLazyLoadingToImages);

  //переключатель
  var switchLogin = document.querySelector('.authorization__switch');
  var authorizationLogin = document.querySelector('.authorization__login');
  var authorizationRegistration = document.querySelector('.authorization__registration');
  function switchSection(section) {
    if (switchLogin) {
      if (section === 'login') {
        authorizationLogin.classList.remove('visually-hidden');
        authorizationRegistration.classList.add('visually-hidden');
        switchLogin.querySelector('button[data-button="login"]').classList.add('active');
        switchLogin.querySelector('button[data-button="registration"]').classList.remove('active');
      } else {
        authorizationLogin.classList.add('visually-hidden');
        authorizationRegistration.classList.remove('visually-hidden');
        switchLogin.querySelector('button[data-button="registration"]').classList.add('active');
        switchLogin.querySelector('button[data-button="login"]').classList.remove('active');
      }
    }
  }
  window.addEventListener('hashchange', function () {
    var hash = window.location.hash.slice(1);
    switchSection(hash);
  });
  var hash = window.location.hash.slice(1) || 'login';
  switchSection(hash);
  if (switchLogin) {
    switchLogin.querySelectorAll('button').forEach(function (buttonSwitch) {
      buttonSwitch.addEventListener('click', function () {
        var dataButton = this.getAttribute('data-button');
        window.location.hash = dataButton;
      });
    });
  }

  //общий switch
  (0, _initSwitch.initSwitch)();
  (0, _initSwitch.openList)();

  //загрузка файла в форме регистрации на соревновании
  (0, _initFileUpload.initFileUpload)();

  //поиск людей в форме регистрации и при редактировании команды в заявке
  var search = document.querySelectorAll('.js-search');
  var peopleList = document.querySelector('.js-people-list');
  if (search && peopleList) {
    search.forEach(function (i) {
      var clonedList = peopleList.cloneNode(true);
      i.appendChild(clonedList);
    });
  }
  (0, _initSearch.findPerson)();

  //чекбоксы/радиобаттоны в форме регистрации
  (0, _initSelect.initSelect)();

  //редактирование фото в профиле
  var fileInput = document.querySelector('.profile-photo__input');
  var previewImg = document.querySelector('.profile-photo__preview img');
  var fileToUpload = null;
  if (fileInput) {
    fileInput.addEventListener('change', function (event) {
      var file = event.target.files[0];
      if (file) {
        fileToUpload = file;
        var reader = new FileReader();
        reader.onload = function (e) {
          previewImg.src = e.target.result;
        };
        reader.readAsDataURL(file);
      }
    });
  }

  //показать пароль
  (0, _initPasswordButton.initPasswordButton)();

  //маски
  (0, _initMask.initMasks)();

  //таблица с возможности сортировки
  (0, _initSortingTable.tableSort)();

  //фильрация друзей и заявок
  var searchInputs = document.querySelectorAll('.switch-block');
  if (document.querySelector('.friend__list') && searchInputs) {
    searchInputs.forEach(function (searchInput) {
      var switchBlock = searchInput.closest('.switch-block');
      var friendList = switchBlock.querySelector('.friend__list');
      var friendItems = friendList.querySelectorAll('.friend__item');
      searchInput.addEventListener('input', filterFriends);
      function filterFriends() {
        var searchText = searchInput.querySelector('.filter-input-name').value.toLowerCase();
        friendItems.forEach(function (item) {
          var name = item.querySelector('.friend__name').textContent.toLowerCase();
          var date = item.querySelector('.friend__date').textContent.toLowerCase();
          if (name.includes(searchText) || date.includes(searchText)) {
            item.style.display = 'flex';
            item.classList.remove('hide');
          } else {
            item.classList.add('hide');
            setTimeout(function () {
              item.style.display = 'none';
            }, 300);
          }
        });
      }
    });
  }

  //закрытие нотификейшена
  var closeAlertButtons = document.querySelectorAll('.js-alert-close');
  if (closeAlertButtons) {
    closeAlertButtons.forEach(function (closeAlertButton) {
      closeAlertButton.addEventListener('click', function () {
        var alert = closeAlertButton.closest('.alert');
        alert.classList.add('alert-fade-out');
        alert.addEventListener('animationend', function () {
          alert.remove();
        });
      });
    });
  }

  //текст на кнопке
  if (document.querySelectorAll('.js-text-sort-button').length > 0) {
    document.querySelectorAll('.js-text-sort-button').forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        var sortValue = item.textContent;
        document.querySelector('.competitions-list__sort-button-text').textContent = sortValue;
      });
    });
  }

  //раскрывашка
  var openListButton = document.querySelector('.js-open-list');
  var switchForm = document.querySelector('.registration__switch-form');
  if (openListButton && radioButtons) {
    openListButton.addEventListener('click', function (event) {
      event.preventDefault();
      switchForm.style.display = switchForm.style.display === 'block' ? 'none' : 'block';
    });
    radioButtons.forEach(function (radio) {
      radio.addEventListener('change', function () {
        if (this.checked) {
          var checkmark = this.nextElementSibling;
          var newText = checkmark.getAttribute('data-text-mobile');
          openListButton.textContent = newText;
        }
      });
    });
  }
  var tableResult = document.querySelector('.js-checkbox-listener');
  var specialResultLinks = document.querySelector('.js-visible-links');
  if (tableResult) {
    var checkboxes = tableResult.querySelectorAll('input[type="checkbox"]');
    if (checkboxes.length > 0) {
      checkboxes.forEach(function (checkbox) {
        checkbox.addEventListener('change', function () {
          var uncheckedCheckboxes = Array.from(checkboxes).filter(function (cb) {
            return !cb.checked;
          });
          if (uncheckedCheckboxes.length === checkboxes.length) {
            specialResultLinks.classList.add('visually-hidden');
          } else {
            specialResultLinks.classList.remove('visually-hidden');
          }
        });
      });
    }
  }
  var splitPositionCheck = document.querySelector('.js-checkbox-more-inf');
  var splitPositionElements = document.querySelectorAll('.split-position');
  if (splitPositionCheck && splitPositionElements.length > 0) {
    splitPositionCheck.addEventListener('change', function () {
      if (splitPositionCheck.checked) {
        splitPositionElements.forEach(function (i) {
          return i.classList.remove('visually-hidden');
        });
      } else {
        splitPositionElements.forEach(function (i) {
          return i.classList.add('visually-hidden');
        });
      }
    });
  }

  //удаление человека в таблице сравнения
  var removeButtons = document.querySelectorAll('.js-table-remove-button');
  if (removeButtons.length > 0) {
    removeButtons.forEach(function (button) {
      button.addEventListener('click', function (event) {
        event.preventDefault();
        removeColumn(this);
      });
    });
  }
  function removeColumn(button) {
    var th = button.parentElement.parentElement;
    var columnIndex = th.cellIndex;
    var table = th.closest("table");
    var rows = table.rows;
    for (var i = 0; i < rows.length; i++) {
      rows[i].deleteCell(columnIndex);
    }
  }

  // инициализация фильтра списка клубов
  (0, _index.initClubsFilter)();

  //поиск по таблице с результатами и участниками
  var searchInputTable = document.querySelector('.filter-input-name');
  var tableResults = document.querySelector('table');
  if (searchInputTable && tableResults) {
    searchTable();
  }
  function searchTable() {
    var thead = tableResults.querySelector('thead');
    var tbody = tableResults.querySelector('tbody');
    var columnWidths = [];
    function saveColumnWidths() {
      columnWidths = [];
      var headerRow = thead.querySelector('tr:last-child');
      var headerCells = headerRow.querySelectorAll('th');
      headerCells.forEach(function (cell) {
        columnWidths.push(cell.offsetWidth);
      });
    }
    function applyColumnWidths() {
      var headerRows = thead.querySelectorAll('tr');
      headerRows.forEach(function (row) {
        var headerCells = row.querySelectorAll('th');
        headerCells.forEach(function (cell, index) {
          cell.style.width = columnWidths[index] + 'px';
        });
      });
      var rows = tbody.querySelectorAll('tr');
      rows.forEach(function (row) {
        var cells = row.querySelectorAll('td');
        cells.forEach(function (cell, index) {
          cell.style.width = columnWidths[index] + 'px';
        });
      });
    }
    window.addEventListener('load', function () {
      saveColumnWidths();
      applyColumnWidths();
    });
    searchInputTable.addEventListener('input', function () {
      var filterText = this.value.toLowerCase();
      var rows = tbody.querySelectorAll('tr');
      rows.forEach(function (row) {
        var cells = row.querySelectorAll('td');
        var found = false;
        cells.forEach(function (cell) {
          if (cell.textContent.toLowerCase().includes(filterText)) {
            found = true;
          }
        });
        if (found) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });
  }

  //открыть форму обратной связи
  (0, _index2.initFeedback)();

  //перестройка грид-контейнера
  var gridWrapper = document.querySelector('.user-form__wrapper--grid');
  if (gridWrapper) {
    if (gridWrapper.querySelectorAll('.user-form__block').length == 1) {
      gridWrapper.classList.add('user-form__wrapper--one-column');
    }
  }

  //добавление поля для ссылки
  var addLinkButton = document.querySelector('.js-add-link-field');
  var linkIndex = 1;
  if (addLinkButton) {
    addLinkButton.addEventListener('click', function () {
      var urlLabel = document.querySelector('.club-link-url').cloneNode(true);
      var textLabel = document.querySelector('.club-link-text').cloneNode(true);
      urlLabel.querySelector('input').name = "club-link-url-".concat(linkIndex);
      textLabel.querySelector('input').name = "club-link-text-".concat(linkIndex);
      urlLabel.querySelector('input').value = '';
      textLabel.querySelector('input').value = '';
      var fieldset = addLinkButton.closest('.user-form__fieldset');
      fieldset.insertBefore(urlLabel, addLinkButton);
      fieldset.insertBefore(textLabel, addLinkButton);
      linkIndex++;
    });
  }
});

},{"./../js/vendor/nice-select2":17,"./modules/accordion/init-accordion":4,"./modules/calendar/init-calendar":5,"./modules/club/index":6,"./modules/feedback/index":7,"./modules/file-upload/init-file-upload":8,"./modules/masks/init-mask":9,"./modules/password/init-password-button":10,"./modules/search/init-search":11,"./modules/select/init-select":12,"./modules/sorting-table/init-sorting-table":13,"./modules/switch/init-switch":14,"./utils/ios-vh-fix":16}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordions = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Accordions = exports.Accordions = /*#__PURE__*/function () {
  function Accordions() {
    _classCallCheck(this, Accordions);
    this._openHeight = 0;
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._windowResizeHandler = this._windowResizeHandler.bind(this);
    this._init();
  }
  return _createClass(Accordions, [{
    key: "_init",
    value: function _init() {
      var _this = this;
      this.fullUpdate();
      document.addEventListener('click', this._documentClickHandler);
      if (document.querySelectorAll('.people-list')) {
        document.querySelectorAll('.people-list').forEach(function (peopleList) {
          peopleList.querySelectorAll('input').forEach(function (i) {
            i.addEventListener('click', _this._windowResizeHandler);
          });
        });
      }
      window.addEventListener('resize', this._windowResizeHandler);
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-accordion="button"]')) {
        return;
      }
      evt.preventDefault();
      var parent = target.closest('[data-accordion="parent"]');
      if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
        return;
      }
      var element = target.closest('[data-accordion="element"]');
      if (element.classList.contains('is-active')) {
        this.closeAccordion(element);
        return;
      }
      this.openAccordion(element);
    }
  }, {
    key: "_windowResizeHandler",
    value: function _windowResizeHandler() {
      this._windowWidth = window.innerWidth;
      this.updateAccordionsHeight();
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this2 = this;
      var elements = parent.querySelectorAll('[data-accordion="element"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion="parent"]');
        if (currentParent === parent) {
          _this2.closeAccordion(element);
        }
      });
    }
  }, {
    key: "updateAccordionsHeight",
    value: function updateAccordionsHeight() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (element) {
        var content = element.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight + 5, "px");
        // content.style.maxHeight = '100%'
        setTimeout(function () {
          content.style.transition = null;
        });
        return;
      }
      var closeElements = document.querySelectorAll('[data-accordion="element"]:not(.is-active)');
      closeElements.forEach(function (closeElement) {
        var parent = closeElement.closest('[data-accordion="parent"]');
        var content = closeElement.querySelector('[data-accordion="content"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.maxHeight = null;
      });
      var openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      openElements.forEach(function (openElement) {
        var content = openElement.querySelector('[data-accordion="content"]');
        var parent = openElement.closest('[data-accordion="parent"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight + 5, "px");
        // content.style.maxHeight = '100%';
        setTimeout(function () {
          content.style.transition = null;
        });
      });
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      var _this3 = this;
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var openElements;
      if (parent) {
        openElements = parent.querySelectorAll('[data-accordion="element"].is-active');
      } else {
        openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      }
      openElements.forEach(function (openElement) {
        var innerParent = openElement.querySelector('[data-accordion="parent"]');
        if (innerParent) {
          return;
        }
        _this3.openAccordion(openElement, transition);
      });
      this.updateAccordionsHeight();
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var parentElement = element.closest('[data-accordion="parent"]');
      var contentElement = element.querySelector('[data-accordion="content"]');
      this._openHeight += contentElement.scrollHeight;
      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }
      element.classList.add('is-active');
      if (transition) {
        contentElement.style.maxHeight = "".concat(this._openHeight + 5, "px");
        // contentElement.style.maxHeight = '100%';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = "".concat(this._openHeight + 5, "px");
        // contentElement.style.maxHeight = '100%';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
      if (parentElement.closest('[data-accordion="element"]')) {
        this.openAccordion(parentElement.closest('[data-accordion="element"]'), transition);
        return;
      }
      this._openHeight = 0;
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var contentElement = element.querySelector('[data-accordion="content"]');
      if (!contentElement) {
        return;
      }
      element.classList.remove('is-active');
      if (transition) {
        contentElement.style.maxHeight = '0';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = '0';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
    }
  }]);
}();

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAccordions = exports.accordions = void 0;
var _accordions = require("./accordions");
var accordions;
var initAccordions = exports.initAccordions = function initAccordions() {
  exports.accordions = accordions = new _accordions.Accordions();
  // Используйте в разработке экспортируемую переменную accordions, window сделан для бэкэнда
  window.accordions = accordions;
};

},{"./accordions":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCalendar = createCalendar;
var _airDatepicker = _interopRequireDefault(require("air-datepicker"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function createCalendar() {
  var selectedContainer = document.querySelector('.selected-items');
  function addToSelectedContainerCalendar(text, item, itemType) {
    if (selectedContainer) {
      if (itemType === 'radio' || itemType === 'region' || itemType === 'date') {
        removeExistingItem(itemType);
      }
      selectedContainer.classList.remove('visually-hidden');
      var selectedItem = document.createElement('div');
      selectedItem.classList.add('selected-item');
      selectedItem.dataset.text = text;
      selectedItem.dataset.itemType = itemType;
      if (itemType === 'date') {
        var selectedItemText = document.createElement('span');
        selectedItemText.textContent = text;
        selectedItem.appendChild(selectedItemText);
      } else {
        var _selectedItemText = document.createElement('span');
        _selectedItemText.textContent = text;
        selectedItem.appendChild(_selectedItemText);
      }
      var removeBtn = document.createElement('span');
      removeBtn.classList.add('remove-btn');
      var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
      svg.setAttribute('width', '10');
      svg.setAttribute('height', '10');
      svg.setAttribute('viewBox', '0 0 10 10');
      svg.setAttribute('fill', 'none');
      var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path.setAttribute('d', 'M1 1L9 9M9 1L1 9');
      svg.appendChild(path);
      removeBtn.appendChild(svg);
      removeBtn.addEventListener('click', function () {
        removeFromSelectedContainerCalendar(text, item);
        if (itemType === 'text') {
          radioButtons.forEach(function (radio) {
            radio.checked = false;
            removeFromSelectedContainerCalendar(radio.parentNode.textContent.trim(), radio.parentNode);
          });
        } else if (itemType === 'radio') {
          removeFromSelectedContainerCalendar("\u0414\u0430\u0442\u0430: ".concat(inputDate.value), inputDate.parentNode);
        }
      });
      selectedItem.appendChild(removeBtn);
      selectedContainer.appendChild(selectedItem);
      console.log('функция addToSelectedContainerCalendar отработала');
    }
  }
  function removeFromSelectedContainerCalendar(text, item) {
    if (selectedContainer) {
      var selectedItems = selectedContainer.querySelectorAll('.selected-item');
      selectedItems.forEach(function (selectedItem) {
        if (selectedItem.dataset.text === text) {
          selectedItem.remove();
          if (item.querySelector('input[type="checkbox"]')) {
            item.querySelector('input[type="checkbox"]').checked = false;
          } else if (item.querySelector('input[type="radio"]')) {
            item.querySelector('input[type="radio"]').checked = false;
          } else if (item.querySelector('input[type="text"]')) {
            item.querySelector('input[type="text"]').value = '';
          }
          if (selectedContainer.children.length === 1) {
            selectedContainer.classList.add('visually-hidden');
          }
        }
      });
      console.log('функция removeFromSelectedContainerCalendar отработала');
    }
  }
  function removeExistingItem(itemType) {
    if (selectedContainer) {
      var existingItems = selectedContainer.querySelectorAll(".selected-item[data-item-type=\"".concat(itemType, "\"]"));
      existingItems.forEach(function (item) {
        return item.remove();
      });
    }
  }
  function parseDate(dateStr) {
    var _dateStr$split$map = dateStr.split('.').map(Number),
      _dateStr$split$map2 = _slicedToArray(_dateStr$split$map, 3),
      day = _dateStr$split$map2[0],
      month = _dateStr$split$map2[1],
      year = _dateStr$split$map2[2];
    return new Date(year, month - 1, day);
  }
  var rangeDateInput = document.querySelectorAll('[data-input="range-date"]');
  var dateInput = document.querySelectorAll('[data-input="simple-date"]');
  if (rangeDateInput.length > 0) {
    rangeDateInput.forEach(function (date) {
      if (date.dataset.initialized === "true") return;
      var startDate = null;
      var endDate = null;
      var datePicker = new _airDatepicker.default(date, {
        range: true,
        multipleDatesSeparator: ' – ',
        position: 'top right',
        autoClose: true,
        container: '.date-picker',
        selectedDates: startDate && endDate ? [startDate, endDate] : [],
        onSelect: function onSelect() {
          console.log(date.value);
          if (date.value !== "") {
            addToSelectedContainerCalendar("\u0414\u0430\u0442\u0430: ".concat(date.value), date.parentNode, 'date');
            var _filterList = document.querySelectorAll('.filter-item');
            if (_filterList) {
              _filterList.forEach(function (item) {
                var input = item.querySelector('input[type="radio"]');
                if (input) {
                  input.checked = false;
                  var text = item.textContent.trim();
                  removeFromSelectedContainerCalendar(text, item, input.type);
                }
              });
            }
          }
          date.dispatchEvent(new Event('change'));
          date.dispatchEvent(new Event('input'));
        }
      });

      // Обработчик для обновления календаря при изменении радио-кнопки
      var filterList = document.querySelectorAll('.filter-item');
      if (filterList) {
        filterList.forEach(function (item) {
          var input = item.querySelector('input[type="radio"]');
          if (input) {
            input.addEventListener('change', function () {
              input.checked = true;
              var valueToAdd = parseInt(input.value, 10);
              var today = new Date();
              var newDate = new Date(today);
              newDate.setDate(today.getDate() + valueToAdd);
              var formattedToday = formatDate(today);
              var formattedNewDate = formatDate(newDate);
              datePicker.clear();
              date.value = "".concat(formattedToday, " \u2013 ").concat(formattedNewDate);
              datePicker.selectDate([today, newDate]);
            });
          }
        });
      }
      date.dataset.initialized = "true";
    });
  }

  // Функция для форматирования даты в нужный формат (дд.мм.гггг)
  function formatDate(date) {
    var day = String(date.getDate()).padStart(2, '0');
    var month = String(date.getMonth() + 1).padStart(2, '0');
    var year = date.getFullYear();
    return "".concat(day, ".").concat(month, ".").concat(year);
  }
  if (dateInput.length > 0) {
    dateInput.forEach(function (date) {
      if (date.dataset.initialized !== "true") {
        var datePicker = new _airDatepicker.default(date, {
          position: 'top right',
          autoClose: true,
          container: '.date-picker',
          onSelect: function onSelect() {
            date.dispatchEvent(new Event('change'));
            date.dispatchEvent(new Event('input'));
          }
        });
        date.dataset.initialized = "true";
      }
    });
  }
}

},{"air-datepicker":1}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reloadClubList = exports.initClubsFilter = void 0;
var selected_club_letter = '';
var search_club_title = '';
var initClubsFilter = exports.initClubsFilter = function initClubsFilter() {
  inputFilter();
  letterFilter();
};
var inputFilter = function inputFilter() {
  var search_input = document.querySelector('.js-search-input');
  if (search_input) {
    search_input.addEventListener('input', function () {
      search_club_title = this.value.length > 2 ? this.value : '';
      reloadClubList();
    });
  }
};
var letterFilter = function letterFilter() {
  var openAlphabetButton = document.querySelector('.js-alphabet');
  var alphabetList = document.querySelector('.alphabet');
  var alphabetButtonText = document.querySelector('.alphabet__text-button');
  if (openAlphabetButton && alphabetList) {
    openAlphabetButton.addEventListener('click', function (event) {
      event.preventDefault();
      alphabetList.classList.toggle('visible');
      openAlphabetButton.querySelector('.arrow').classList.toggle('active');
    });
    var windowWidth = window.innerWidth;
    if (windowWidth >= 768) {
      alphabetList.classList.add('visible');
      openAlphabetButton.querySelector('.arrow').classList.add('active');
    }
    window.addEventListener('resize', function () {
      var windowWidth = window.innerWidth;
      if (windowWidth >= 768) {
        alphabetList.classList.add('visible');
        openAlphabetButton.querySelector('.arrow').classList.add('active');
      } else {
        alphabetList.classList.remove('visible');
        openAlphabetButton.querySelector('.arrow').classList.remove('active');
      }
    });
    var radios = document.querySelectorAll('input[name="letter"]');
    var selectedRadio = null;
    radios.forEach(function (radio) {
      radio.addEventListener('change', function () {
        if (selectedRadio !== this) {
          selected_club_letter = radio.value;
          alphabetButtonText.textContent = this.value;
          alphabetButtonText.style.textTransform = "uppercase";
          alphabetButtonText.style.color = "#2E2E2E";
          reloadClubList();
        }
        selectedRadio = this;
      });
      radio.addEventListener('click', function () {
        if (selectedRadio === this) {
          selected_club_letter = '';
          selectedRadio = null;
          this.checked = false;
          alphabetButtonText.textContent = 'Выберите букву';
          alphabetButtonText.style.textTransform = "none";
          alphabetButtonText.style.color = "#999999";
          reloadClubList();
        }
      });
    });
  }
};
var reloadClubList = exports.reloadClubList = function reloadClubList() {
  var clubs_list = document.querySelector('.js-clubs-list');
  if (clubs_list) {
    var url = new URL(window.location.href);
    if (search_club_title.trim() !== '') {
      url.searchParams.set('title', search_club_title.trim());
      if (url.searchParams.has('page')) url.searchParams.delete('page');
    }
    if (selected_club_letter.trim() !== '') {
      url.searchParams.set('letter', selected_club_letter.trim());
      if (url.searchParams.has('page')) url.searchParams.delete('page');
    }
    fetch(url, {
      method: 'get',
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    }).then(function (response) {
      return response.text();
    }).then(function (res) {
      var newNode = document.createElement('div');
      newNode.innerHTML = res;
      // clubs_list.outerHTML = newNode.innerHTML;
      clubs_list.parentNode.replaceChild(newNode, clubs_list);
    }).catch(function (error) {
      console.log(error);
    });
  }
};

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initFeedback = void 0;
var initFeedback = exports.initFeedback = function initFeedback() {
  var openFormModalButton = document.querySelector('.js-open-modal');
  var closeFormModalButtons = document.querySelectorAll('.js-close-modal');
  if (closeFormModalButtons.length > 0) {
    closeFormModalButtons.forEach(function (closeFormModalButton) {
      closeFormModalButton.addEventListener('click', function () {
        closeFormModalButton.closest('.modal').classList.remove('active');
        document.querySelector('body').classList.remove('dark-modal');
      });
    });
  }
  if (openFormModalButton) {
    if (openFormModalButton.dataset.open) openFeedbackModalForm();
    openFormModalButton.addEventListener('click', function () {
      openFeedbackModalForm();
    });
  }
};
var openFeedbackModalForm = function openFeedbackModalForm() {
  document.querySelector('.modal').classList.add('active');
  document.querySelector('body').classList.add('dark-modal');
};

},{}],8:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initFileUpload = initFileUpload;
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function initFileUpload() {
  function createFileIcon() {
    var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', '16');
    svg.setAttribute('height', '16');
    svg.setAttribute('viewBox', '0 0 16 16');
    svg.setAttribute('fill', 'none');
    var path1 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path1.setAttribute('d', 'M13.375 7H9C8.60218 7 8.22064 6.84196 7.93934 6.56066C7.65804 6.27936 7.5 5.89782 7.5 5.5V1.125C7.5 1.09185 7.48683 1.06005 7.46339 1.03661C7.43995 1.01317 7.40815 1 7.375 1H4.5C3.96957 1 3.46086 1.21071 3.08579 1.58579C2.71071 1.96086 2.5 2.46957 2.5 3V13C2.5 13.5304 2.71071 14.0391 3.08579 14.4142C3.46086 14.7893 3.96957 15 4.5 15H11.5C12.0304 15 12.5391 14.7893 12.9142 14.4142C13.2893 14.0391 13.5 13.5304 13.5 13V7.125C13.5 7.09185 13.4868 7.06005 13.4634 7.03661C13.4399 7.01317 13.4082 7 13.375 7Z');
    path1.setAttribute('fill', '#999999');
    var path2 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path2.setAttribute('d', 'M13.1006 5.89359L8.60656 1.39952C8.59782 1.39083 8.58671 1.38492 8.57462 1.38253C8.56253 1.38014 8.55001 1.38138 8.53862 1.38609C8.52723 1.3908 8.51749 1.39877 8.51062 1.409C8.50375 1.41923 8.50005 1.43126 8.5 1.44359V5.50015C8.5 5.63276 8.55268 5.75993 8.64645 5.8537C8.74021 5.94747 8.86739 6.00015 9 6.00015H13.0566C13.0689 6.0001 13.0809 5.9964 13.0911 5.98953C13.1014 5.98266 13.1093 5.97292 13.1141 5.96153C13.1188 5.95014 13.12 5.93762 13.1176 5.92553C13.1152 5.91344 13.1093 5.90232 13.1006 5.89359Z');
    path2.setAttribute('fill', '#999999');
    svg.appendChild(path1);
    svg.appendChild(path2);
    return svg;
  }
  function createRemoveIcon() {
    var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', '10');
    svg.setAttribute('height', '10');
    svg.setAttribute('viewBox', '0 0 10 10');
    svg.setAttribute('fill', 'none');
    var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttribute('d', 'M1 1L9 9M9 1L1 9');
    path.setAttribute('stroke', 'currentColor');
    path.setAttribute('stroke-width', '2');
    svg.appendChild(path);
    return svg;
  }
  var fileInputs = document.querySelectorAll('.file-input');
  var fileInputImgs = document.querySelectorAll('.file-input-img');
  var fileLabels = [];
  var fileLabelImgs = [];
  fileInputs.forEach(function (fileInput) {
    if (!(fileInput.dataset.initialized === 'true')) {
      fileInput.setAttribute('data-initialized', 'true');
      fileLabels.push(fileInput.closest('label'));
      fileInput.addEventListener('change', function (e) {
        handleFileSelection(this);
      });
    } else return;
  });
  fileInputImgs.forEach(function (fileInputImg) {
    if (!(fileInputImg.dataset.initialized === 'true')) {
      fileInputImg.setAttribute('data-initialized', 'true');
      fileLabelImgs.push(fileInputImg.closest('label'));
      fileInputImg.addEventListener('change', function (e) {
        handleFileSelection(this);
      });
    } else return;
  });
  function createThumbnail(file) {
    return new Promise(function (resolve) {
      var reader = new FileReader();
      reader.onload = function (e) {
        var img = document.createElement('img');
        img.src = e.target.result;
        img.className = 'file-thumbnail';
        img.style.width = '40px';
        img.style.height = '40px';
        img.style.borderRadius = '50%';
        img.style.objectFit = 'cover';
        resolve(img);
      };
      reader.readAsDataURL(file);
    });
  }
  var selectedFiles = new Map();
  function handleFileSelection(_x) {
    return _handleFileSelection.apply(this, arguments);
  }
  function _handleFileSelection() {
    _handleFileSelection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {
      var fileInfo, label, inputFiles, _loop, _i, _Array$from;
      return _regeneratorRuntime().wrap(function _callee$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            fileInfo = input.closest('.file-upload').querySelector('.file-info');
            label = input.closest('label');
            if (!(input.files && input.files.length > 0)) {
              _context2.next = 18;
              break;
            }
            if (!input.multiple || fileInfo.children.length === 0) {
              fileInfo.innerHTML = '';
              selectedFiles.set(input, new Map());
            }
            fileInfo.style.display = 'flex';
            if (!input.multiple) {
              label.style.display = 'none';
            }
            inputFiles = selectedFiles.get(input) || new Map();
            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
              var file, fileWrapper, fileIconOrThumbnail, fileIconWrapper, fileNameSpan, removeButton;
              return _regeneratorRuntime().wrap(function _loop$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    file = _Array$from[_i];
                    if (!inputFiles.has(file.name)) {
                      _context.next = 3;
                      break;
                    }
                    return _context.abrupt("return", 1);
                  case 3:
                    inputFiles.set(file.name, file);
                    fileWrapper = document.createElement('div');
                    fileWrapper.className = 'file-wrapper';
                    if (!file.type.startsWith('image/')) {
                      _context.next = 12;
                      break;
                    }
                    _context.next = 9;
                    return createThumbnail(file);
                  case 9:
                    fileIconOrThumbnail = _context.sent;
                    _context.next = 13;
                    break;
                  case 12:
                    fileIconOrThumbnail = createFileIcon();
                  case 13:
                    fileIconWrapper = document.createElement('span');
                    fileIconWrapper.className = 'file-icon';
                    fileIconWrapper.appendChild(fileIconOrThumbnail);
                    fileWrapper.appendChild(fileIconWrapper);
                    fileNameSpan = document.createElement('span');
                    fileNameSpan.className = 'file-name';
                    fileNameSpan.textContent = file.name;
                    fileWrapper.appendChild(fileNameSpan);
                    removeButton = document.createElement('span');
                    removeButton.className = 'remove-file';
                    removeButton.appendChild(createRemoveIcon());
                    fileWrapper.appendChild(removeButton);
                    fileInfo.appendChild(fileWrapper);
                    removeButton.addEventListener('click', function (e) {
                      fileWrapper.remove();
                      inputFiles.delete(file.name);
                      updateFileList(input);
                      if (fileInfo.children.length === 0) {
                        fileInfo.style.display = 'none';
                        label.style.display = 'flex';
                      }
                    });
                  case 27:
                  case "end":
                    return _context.stop();
                }
              }, _loop);
            });
            _i = 0, _Array$from = Array.from(input.files);
          case 9:
            if (!(_i < _Array$from.length)) {
              _context2.next = 16;
              break;
            }
            return _context2.delegateYield(_loop(), "t0", 11);
          case 11:
            if (!_context2.t0) {
              _context2.next = 13;
              break;
            }
            return _context2.abrupt("continue", 13);
          case 13:
            _i++;
            _context2.next = 9;
            break;
          case 16:
            selectedFiles.set(input, inputFiles);
            updateFileList(input);
          case 18:
          case "end":
            return _context2.stop();
        }
      }, _callee);
    }));
    return _handleFileSelection.apply(this, arguments);
  }
  function updateFileList(input) {
    var dataTransfer = new DataTransfer();
    var inputFiles = selectedFiles.get(input);
    if (inputFiles) {
      var _iterator = _createForOfIteratorHelper(inputFiles.values()),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var file = _step.value;
          dataTransfer.items.add(file);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    input.files = dataTransfer.files;
  }
  function updateFileDisplay(input) {
    var fileInfo = input.closest('.file-upload').querySelector('.file-info');
    var label = input.closest('label');
    if (input.files.length > 0) {
      fileInfo.style.display = 'flex';
      label.style.display = 'none';
    } else {
      fileInfo.style.display = 'none';
      label.style.display = 'flex';
    }
  }
  document.addEventListener('DOMContentLoaded', function () {
    [].concat(_toConsumableArray(fileInputs), _toConsumableArray(fileInputImgs)).forEach(function (input) {
      if (input) {
        updateFileDisplay(input);
      }
    });
  });
}

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initMasks = initMasks;
// import IMask from 'imask';

var phoneElements = document.querySelectorAll('[data-input="phone"]');
var dateElements = document.querySelectorAll('[data-input="simple-date"]');
var rangeDateElements = document.querySelectorAll('[data-input="range-date"]');
function initMasks() {
  if (phoneElements) {
    phoneElements.forEach(function (phoneElement) {
      var mask = IMask(phoneElement, {
        mask: '+{7}(000)000-00-00'
      });
      phoneElement.addEventListener('input change', function () {
        mask.updateValue();
      });
    });
  }
  if (dateElements) {
    dateElements.forEach(function (dateElement) {
      var mask = IMask(dateElement, {
        mask: Date,
        min: new Date(1900, 0, 1),
        max: new Date(2200, 0, 1),
        lazy: true,
        placeholderChar: '_',
        placeholder: 'dd.mm.yyyy'
      });
      dateElement.value = mask.value;
      dateElement.addEventListener('input', function () {
        mask.updateValue();
      });
      dateElement.addEventListener('change', function () {
        if (mask.value < mask.min || mask.value > mask.max) {
          alert('Введена недопустимая дата. Пожалуйста, введите дату в диапазоне от 01.01.1900 до 01.01.2200.');
          dateElement.value = mask.value;
        } else {
          mask.updateValue();
        }
      });
    });
  }
  if (rangeDateElements) {
    rangeDateElements.forEach(function (rangeDateElement) {
      rangeDateElement.setAttribute('readonly', true);
    });
  }
  applyUniversalMasks();
  function applyUniversalMasks() {
    var allInputs = document.querySelectorAll('input');
    allInputs.forEach(function (input) {
      var dataInput = input.getAttribute('data-input');
      if (dataInput && !['phone', 'simple-date', 'range-date', 'only-letters'].includes(dataInput)) {
        createMask(input, dataInput);
      }
    });
  }
  function createMask(input, maskPattern) {
    var placeholder = input.getAttribute('placeholder');
    var currentValue = input.value;
    var mask;
    if (maskPattern.startsWith('/') && maskPattern.endsWith('/')) {
      mask = IMask(input, {
        mask: new RegExp(maskPattern.slice(1, -1)),
        lazy: false,
        placeholderChar: '_'
      });
    } else {
      mask = IMask(input, {
        mask: maskPattern,
        lazy: false,
        placeholderChar: '_'
      });
    }
    input.value = '';
    mask.updateValue(currentValue);
    function updatePlaceholder() {
      if (input.value === '') {
        input.setAttribute('placeholder', placeholder);
      } else {
        input.removeAttribute('placeholder');
      }
    }
    input.addEventListener('input change', function () {
      updatePlaceholder();
    });
    updatePlaceholder();
  }
}

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPasswordButton = initPasswordButton;
function initPasswordButton() {
  var showPasswordButtons = document.querySelectorAll('.show-password-js');
  if (showPasswordButtons) {
    showPasswordButtons.forEach(function (showPasswordButton) {
      var svgElements = showPasswordButton.querySelectorAll('svg');
      var inputElement = showPasswordButton.parentElement.querySelector('input');
      showPasswordButton.addEventListener('click', function (event) {
        event.preventDefault();
        if (inputElement.type === 'text') {
          inputElement.type = 'password';
          svgElements[1].classList.add('visually-hidden');
          svgElements[0].classList.remove('visually-hidden');
        } else {
          inputElement.type = 'text';
          svgElements[0].classList.add('visually-hidden');
          svgElements[1].classList.remove('visually-hidden');
        }
      });
      var passwordInput = showPasswordButton.parentElement.querySelector('input[type="password"]');
      passwordInput.addEventListener('input', function () {
        if (passwordInput.value !== '') {
          svgElements[0].classList.remove('visually-hidden');
        } else {
          svgElements[0].classList.add('visually-hidden');
        }
      });
    });
  }
}

},{}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findPerson = findPerson;
function findPerson() {
  var userFormFieldsets = document.querySelectorAll('.user-form__fieldset:not(.user-form__fieldset--wrapper)');
  if (userFormFieldsets) {
    userFormFieldsets.forEach(function (userFormFieldset) {
      var peopleListContainers = userFormFieldset.querySelectorAll('.people-list');
      var searchContainerChecked = userFormFieldset.querySelector('.search-container--checked');
      if (peopleListContainers) {
        peopleListContainers.forEach(function (peopleListContainer) {
          var searchInput = peopleListContainer.parentElement.querySelector('.filter-input-name');
          var people = peopleListContainer.querySelectorAll('label');
          if (peopleListContainer.querySelector('input[type=checkbox]')) {
            peopleListContainer.classList.add('filter-item--search-checkbox');
          }
          searchInput.addEventListener('input', function () {
            var searchTerm = this.value.toLowerCase().trim();
            var hasVisibleItems = false;
            people.forEach(function (person) {
              var name = person.querySelector('.checkmark__name').textContent.toLowerCase();
              var date = person.querySelector('.checkmark__date').textContent.toLowerCase();
              if (name.includes(searchTerm) || date.includes(searchTerm)) {
                person.style.display = '';
                hasVisibleItems = true;
              } else {
                person.style.display = 'none';
              }
            });
            if (hasVisibleItems && searchTerm !== '') {
              peopleListContainer.classList.remove('visually-hidden');
            } else {
              peopleListContainer.classList.add('visually-hidden');
            }
          });
          peopleListContainer.addEventListener('click', function (event) {
            if (event.target === peopleListContainer) {
              peopleListContainer.classList.add('visually-hidden');
            }
          });
          searchInput.addEventListener('focus', function () {
            if (this.value.trim() !== '') {
              peopleListContainer.classList.remove('visually-hidden');
            }
          });
          peopleListContainer.addEventListener('click', function (event) {
            if (event.target.closest('label')) {
              var selectedPerson = event.target.closest('label');
              var selectedInput = selectedPerson.querySelector('input[type="checkbox"], input[type="radio"]');
              selectedInput.checked = true;
              var isCheckbox = selectedInput.type === 'checkbox';
              var selectedName = selectedPerson.querySelector('.checkmark__name').textContent;
              searchInput.value = selectedName;
              peopleListContainer.classList.add('visually-hidden');
              var personClone = selectedPerson.cloneNode(true);
              personClone.classList.remove('visually-hidden');
              var buttonsWrapper = document.createElement('div');
              buttonsWrapper.classList.add('checkmark__btn-wrapper');
              personClone.querySelector('.checkmark').appendChild(buttonsWrapper);
              if (peopleListContainer.closest('.js-edit-fieldset')) {
                var editButton = document.createElement('a');
                editButton.classList.add('checkmark__edit-btn');
                editButton.innerHTML = "\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n  <path d=\"M4.41999 20.579C4.13948 20.5785 3.87206 20.4602 3.68299 20.253C3.49044 20.0475 3.39476 19.7695 3.41999 19.489L3.66499 16.795L14.983 5.481L18.52 9.017L7.20499 20.33L4.51099 20.575C4.47999 20.578 4.44899 20.579 4.41999 20.579ZM19.226 8.31L15.69 4.774L17.811 2.653C17.9986 2.46522 18.2531 2.35971 18.5185 2.35971C18.7839 2.35971 19.0384 2.46522 19.226 2.653L21.347 4.774C21.5348 4.96157 21.6403 5.21609 21.6403 5.4815C21.6403 5.74691 21.5348 6.00143 21.347 6.189L19.227 8.309L19.226 8.31Z\" fill=\"#999999\"/>\n</svg>\n              ";
                // personClone.querySelector('.checkmark').appendChild(editButton);
                buttonsWrapper.appendChild(editButton);
                editButton.addEventListener('mouseover', function () {
                  this.querySelector('path').setAttribute('fill', '#2E2E2E');
                });
                editButton.addEventListener('mouseleave', function () {
                  this.querySelector('path').setAttribute('fill', '#999999');
                });
              }
              var closeButton = document.createElement('button');
              closeButton.classList.add('checkmark__close-btn');
              closeButton.innerHTML = "\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\">\n                <path d=\"M1 1L17 17M17 1L1 17\" stroke=\"#999999\" stroke-width=\"2\" stroke-linecap=\"round\" />\n              </svg>\n            ";
              buttonsWrapper.appendChild(closeButton);
              closeButton.addEventListener('mouseover', function () {
                this.querySelector('path').setAttribute('stroke', '#2E2E2E');
              });
              closeButton.addEventListener('mouseleave', function () {
                this.querySelector('path').setAttribute('stroke', '#999999');
              });
              closeButton.addEventListener('click', function () {
                personClone.remove();
                selectedInput.checked = false;
              });
              if (isCheckbox) {
                var existingItem = searchContainerChecked.querySelector("[data-value=\"".concat(selectedInput.value, "\"]"));
                if (!existingItem) {
                  searchContainerChecked.appendChild(personClone);
                  personClone.setAttribute('data-value', selectedInput.value);
                  selectedInput.checked = true;
                }
              } else {
                var selectedItems = searchContainerChecked.querySelectorAll('.filter-item');
                selectedItems.forEach(function (item) {
                  var radioInput = item.querySelector('input[type="radio"]');
                  if (radioInput) {
                    radioInput.checked = false;
                  }
                });
                searchContainerChecked.innerHTML = '';
                var jsSearchContainer = searchContainerChecked.closest('.js-search');
                jsSearchContainer.style.maxHeight = "200px";
                searchContainerChecked.appendChild(personClone);
                selectedInput.checked = true;
              }
            }
          });
          document.addEventListener('click', function (event) {
            if (!peopleListContainer.contains(event.target) && event.target !== searchInput) {
              peopleListContainer.classList.add('visually-hidden');
            }
          });
          peopleListContainer.classList.add('visually-hidden');
        });
      }
    });
  }
}

},{}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSelect = initSelect;
exports.updateInitializedSelects = updateInitializedSelects;
var _niceSelect = _interopRequireDefault(require("./../../../js/vendor/nice-select2"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var customNiceSelects = [];
function updateSelect(customNiceSelect) {
  customNiceSelect.update();
}
function updateInitializedSelects() {
  if (customNiceSelects.length > 0) {
    customNiceSelects.forEach(function (customSelectInitialized) {
      customSelectInitialized.update();
    });
  }
}
function initSelect() {
  var customSelects = document.querySelectorAll('select.js-custom-select');
  if (customSelects.length > 0) {
    customSelects.forEach(function (customSelect) {
      customSelect.style.width = "0";
      if (customSelect.dataset.initialized === "true") {
        return;
      } else {
        var customNiceSelect = new _niceSelect.default(customSelect, {
          searchable: false
        });
        customSelect.dataset.initialized = "true";
        customNiceSelects.push(customNiceSelect);
        customSelect.addEventListener('change', function () {
          updateSelect(customNiceSelect);
        });
        var niceSelect = customSelect.nextElementSibling;

        // const selectedOption = customSelect.querySelector('option[selected]:not([disabled])');
        // const selectedOptionNice = niceSelect.querySelector('.selected:not(.disabled)');
        // if (selectedOptionNice) {
        //   niceSelect.querySelector('.multiple-options, .current').style.color = "#000000";
        //   customNiceSelect.update();
        //   // customSelect.closest('.custom-select').querySelector('.current').style.color = "#000000";
        // }

        setTimeout(function () {
          var selectedOption = customSelect.querySelector('option[selected]:not([disabled])');
          var selectedOptionNice = niceSelect.querySelector('.selected:not(.disabled)');
          if (selectedOption) {
            niceSelect.querySelector('.multiple-options, .current').style.color = "#000000";
          }
        }, 0);
        customSelect.addEventListener('change', function () {
          var selectedOptions = Array.from(customSelect.selectedOptions).map(function (option) {
            return option.text;
          });
          var niceSelect = customSelect.nextElementSibling;
          console.log(niceSelect);
          niceSelect.querySelector('.multiple-options, .current').style.color = "#000000";

          //для мультиселекта
          if (niceSelect.querySelector('.multiple-options')) {
            niceSelect.querySelector('.multiple-options').textContent = selectedOptions.join(', ');
          }
        });
      }
    });
  }
}

},{"./../../../js/vendor/nice-select2":17}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tableSort = tableSort;
function tableSort() {
  var table = document.querySelector('.js-members-table table');
  if (table) {
    var headers = table.querySelectorAll('th');
    var tableBody = table.querySelector('tbody');
    var rows = tableBody.querySelectorAll('tr');
    var sortColumn = function sortColumn(index) {
      var type = headers[index].getAttribute('data-sort') || 'string';
      var direction = headers[index].classList.contains('desc') ? 'asc' : 'desc';
      var multiplier = direction === 'asc' ? 1 : -1;
      var newRows = Array.from(rows);
      newRows.sort(function (rowA, rowB) {
        var cellA = rowA.querySelectorAll('td')[index].textContent;
        var cellB = rowB.querySelectorAll('td')[index].textContent;
        var comparison = 0;
        if (type === 'number') {
          comparison = parseFloat(cellA) - parseFloat(cellB);
        } else {
          comparison = cellA.localeCompare(cellB);
        }
        return comparison * multiplier;
      });
      while (tableBody.firstChild) {
        tableBody.removeChild(tableBody.firstChild);
      }
      newRows.forEach(function (newRow) {
        return tableBody.appendChild(newRow);
      });
      headers.forEach(function (header) {
        header.querySelectorAll('.arrows-sort').forEach(function (svg) {
          return svg.classList.remove('active');
        });
      });
      var currentHeader = headers[index];
      var topArrow = currentHeader.querySelector('.arrows-sort--top');
      var bottomArrow = currentHeader.querySelector('.arrows-sort:not(.arrows-sort--top)');
      if (direction === 'asc') {
        topArrow.classList.add('active');
        bottomArrow.classList.remove('active');
      } else {
        bottomArrow.classList.add('active');
        topArrow.classList.remove('active');
      }
      headers.forEach(function (header) {
        return header.classList.remove('asc', 'desc');
      });
      headers[index].classList.add(direction);
    };
    headers.forEach(function (header, index) {
      header.addEventListener('click', function () {
        sortColumn(index);
      });
    });
  }
}

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSwitch = initSwitch;
exports.openList = openList;
var switchList = document.querySelector('.switch__list');
var contentSections = document.querySelectorAll('.switch-block');
var switchButton = document.querySelector('.switch__open-list-js');
function initSwitch() {
  if (switchList && switchButton) {
    window.addEventListener('hashchange', function () {
      var hash = window.location.hash.slice(1);
      switchSection(hash);
    });
    if (contentSections.length > 0) {
      contentSections[0].classList.remove('visually-hidden');
    }
    if (switchList.querySelector('.active.switch__button')) {
      var hash = window.location.hash.slice(1) || switchList.querySelector('.active.switch__button').getAttribute('data-button');
      switchSection(hash);
    }
    switchButton.addEventListener('click', function (event) {
      event.preventDefault();
      switchList.classList.toggle('active');
      switchButton.classList.toggle('active');
    });
    if (switchList.querySelector('button')) {
      switchList.querySelectorAll('button').forEach(function (buttonSwitch, index) {
        buttonSwitch.addEventListener('click', function () {
          var dataButton = this.getAttribute('data-button');
          window.location.hash = dataButton;
          switchButton.querySelector('.switch__button-mobile').textContent = this.textContent.trim();
          switchList.classList.remove('active');
          switchButton.classList.remove('active');
          switchSection(dataButton);
        });
      });
    }
  }
}
function switchSection(section) {
  var buttons = switchList.querySelectorAll('button');
  if (buttons) {
    buttons.forEach(function (btn) {
      return btn.classList.remove('active');
    });
    var activeButton = Array.from(buttons).find(function (btn) {
      return btn.getAttribute('data-button') === section;
    });
    if (activeButton) {
      activeButton.classList.add('active');
      switchButton.querySelector('.switch__button-mobile').textContent = activeButton.textContent.trim();
      var index = Array.from(buttons).indexOf(activeButton);
      contentSections.forEach(function (sectionEl, idx) {
        if (idx === index) {
          sectionEl.classList.remove('visually-hidden');
        } else {
          sectionEl.classList.add('visually-hidden');
        }
      });
    } else {
      buttons[0].classList.add('active');
      switchButton.querySelector('.switch__button-mobile').textContent = buttons[0].textContent.trim();
      contentSections.forEach(function (sectionEl, idx) {
        if (idx === 0) {
          sectionEl.classList.remove('visually-hidden');
        } else {
          sectionEl.classList.add('visually-hidden');
        }
      });
    }
  }
}
function openList() {
  var openListButtons = document.querySelectorAll('.open-list-js');
  if (openListButtons) {
    openListButtons.forEach(function (openListButton) {
      openListButton.addEventListener('click', function (event) {
        event.preventDefault();
        openListButton.closest('.switch').querySelector('.switch__list').classList.toggle('active');
        openListButton.classList.toggle('active');
      });
    });
  }
}

},{}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = exports.iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

},{}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = exports.iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};

},{"./ios-checker":15}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bind = bind;
exports.default = NiceSelect;
// utility functions
function triggerClick(el) {
  var event = document.createEvent("MouseEvents");
  event.initEvent("click", true, false);
  el.dispatchEvent(event);
}
function triggerChange(el) {
  var event = document.createEvent("HTMLEvents");
  event.initEvent("change", true, false);
  el.dispatchEvent(event);
}
function triggerFocusIn(el) {
  var event = document.createEvent("FocusEvent");
  event.initEvent("focusin", true, false);
  el.dispatchEvent(event);
}
function triggerFocusOut(el) {
  var event = document.createEvent("FocusEvent");
  event.initEvent("focusout", true, false);
  el.dispatchEvent(event);
}
function triggerModalOpen(el) {
  var event = document.createEvent("UIEvent");
  event.initEvent("modalopen", true, false);
  el.dispatchEvent(event);
}
function triggerModalClose(el) {
  var event = document.createEvent("UIEvent");
  event.initEvent("modalclose", true, false);
  el.dispatchEvent(event);
}
function triggerValidationMessage(el, type) {
  if (type == 'invalid') {
    addClass(this.dropdown, 'invalid');
    removeClass(this.dropdown, 'valid');
  } else {
    addClass(this.dropdown, 'valid');
    removeClass(this.dropdown, 'invalid');
  }
}
function attr(el, key) {
  if (el[key] != undefined) {
    return el[key];
  }
  return el.getAttribute(key);
}
function data(el, key) {
  return el.getAttribute("data-" + key);
}
function hasClass(el, className) {
  if (el) {
    return el.classList.contains(className);
  } else {
    return false;
  }
}
function addClass(el, className) {
  if (el) return el.classList.add(className);
}
function removeClass(el, className) {
  if (el) return el.classList.remove(className);
}
var defaultOptions = {
  data: null,
  searchable: true,
  showSelectedItems: false
};
function NiceSelect(element, options) {
  this.el = element;
  this.config = Object.assign({}, defaultOptions, options || {});
  this.data = this.config.data;
  this.selectedOptions = [];
  this.placeholder = attr(this.el, "placeholder") || this.config.placeholder || "Регион/область";
  this.searchtext = attr(this.el, "searchtext") || this.config.searchtext || "Начните поиск";
  this.selectedtext = attr(this.el, "selectedtext") || this.config.selectedtext || "selected";
  this.dropdown = null;
  this.multiple = attr(this.el, "multiple");
  this.disabled = attr(this.el, "disabled");
  this.create();
}
NiceSelect.prototype.create = function () {
  this.el.style.opacity = "0";
  this.el.style.width = "0";
  this.el.style.padding = "0";
  this.el.style.height = "0";
  this.el.style.position = "absolute";
  this.el.style.top = "0";
  this.el.style.left = "0";
  if (this.data) {
    this.processData(this.data);
  } else {
    this.extractData();
  }
  this.renderDropdown();
  this.bindEvent();
};
NiceSelect.prototype.processData = function (data) {
  var options = [];
  data.forEach(function (item) {
    options.push({
      data: item,
      attributes: {
        selected: !!item.selected,
        disabled: !!item.disabled,
        optgroup: item.value == 'optgroup'
      }
    });
  });
  this.options = options;
};
NiceSelect.prototype.extractData = function () {
  var _this = this;
  var options = this.el.querySelectorAll("option,optgroup");
  var data = [];
  var allOptions = [];
  var selectedOptions = [];
  options.forEach(function (item) {
    if (item.tagName == 'OPTGROUP') {
      var itemData = {
        text: item.label,
        value: 'optgroup'
      };
    } else {
      var itemData = {
        text: item.innerText,
        value: item.value,
        selected: item.getAttribute("selected") != null || _this.el.value == item.value,
        disabled: item.getAttribute("disabled") != null
      };
    }
    var attributes = {
      selected: item.selected,
      disabled: item.disabled,
      optgroup: item.tagName == 'OPTGROUP'
    };
    data.push(itemData);
    allOptions.push({
      data: itemData,
      attributes: attributes
    });
  });
  this.data = data;
  this.options = allOptions;
  this.options.forEach(function (item) {
    if (item.attributes.selected) {
      selectedOptions.push(item);
    }
  });
  this.selectedOptions = selectedOptions;
};
NiceSelect.prototype.renderDropdown = function () {
  var classes = ["nice-select", attr(this.el, "class") || "", this.disabled ? "disabled" : "", this.multiple ? "has-multiple" : ""];
  var searchHtml = "<div class=\"nice-select-search-box\">";
  searchHtml += "<input type=\"text\" class=\"nice-select-search\" placeholder=\"".concat(this.searchtext, "...\" title=\"search\"/>");
  searchHtml += "</div>";
  var html = "<div class=\"".concat(classes.join(" "), "\" tabindex=\"").concat(this.disabled ? null : 0, "\">");
  html += "<span class=\"".concat(this.multiple ? "multiple-options" : "current", "\"></span>");
  html += "<div class=\"nice-select-dropdown\">";
  html += "".concat(this.config.searchable ? searchHtml : "");
  html += "<ul class=\"list\"></ul>";
  html += "</div>";
  html += "</div>";
  this.el.insertAdjacentHTML("afterend", html);
  this.dropdown = this.el.nextElementSibling;
  this._renderSelectedItems();
  this._renderItems();
};
NiceSelect.prototype._renderSelectedItems = function () {
  if (this.multiple) {
    var selectedHtml = "";
    if (this.config.showSelectedItems || this.config.showSelectedItems || window.getComputedStyle(this.dropdown).width == 'auto' || this.selectedOptions.length < 2) {
      this.selectedOptions.forEach(function (item) {
        selectedHtml += "<span class=\"current\">".concat(item.data.text, "</span>");
      });
      selectedHtml = selectedHtml == "" ? this.placeholder : selectedHtml;
    } else {
      selectedHtml = this.selectedOptions.length + ' ' + this.selectedtext;
    }
    this.dropdown.querySelector(".multiple-options").innerHTML = selectedHtml;
  } else {
    var html = this.selectedOptions.length > 0 ? this.selectedOptions[0].data.text : this.placeholder;
    this.dropdown.querySelector(".current").innerHTML = html;
  }
};
NiceSelect.prototype._renderItems = function () {
  var _this2 = this;
  var ul = this.dropdown.querySelector("ul");
  this.options.forEach(function (item) {
    ul.appendChild(_this2._renderItem(item));
  });
};
NiceSelect.prototype._renderItem = function (option) {
  var el = document.createElement("li");
  el.innerHTML = option.data.text;
  if (option.attributes.optgroup) {
    addClass(el, 'optgroup');
  } else {
    var _el$classList;
    el.setAttribute("data-value", option.data.value);
    var classList = ["option", option.attributes.selected ? "selected" : null, option.attributes.disabled ? "disabled" : null];
    el.addEventListener("click", this._onItemClicked.bind(this, option));
    (_el$classList = el.classList).add.apply(_el$classList, classList);
  }
  option.element = el;
  return el;
};
NiceSelect.prototype.update = function () {
  this.extractData();
  if (this.dropdown) {
    var open = hasClass(this.dropdown, "open");
    this.dropdown.parentNode.removeChild(this.dropdown);
    this.create();
    if (open) {
      triggerClick(this.dropdown);
    }
  }
  if (attr(this.el, "disabled")) {
    this.disable();
  } else {
    this.enable();
  }
};
NiceSelect.prototype.disable = function () {
  if (!this.disabled) {
    this.disabled = true;
    addClass(this.dropdown, "disabled");
  }
};
NiceSelect.prototype.enable = function () {
  if (this.disabled) {
    this.disabled = false;
    removeClass(this.dropdown, "disabled");
  }
};
NiceSelect.prototype.clear = function () {
  this.resetSelectValue();
  this.selectedOptions = [];
  this._renderSelectedItems();
  this.update();
  triggerChange(this.el);
};
NiceSelect.prototype.destroy = function () {
  if (this.dropdown) {
    this.dropdown.parentNode.removeChild(this.dropdown);
    this.el.style.display = "";
  }
};
NiceSelect.prototype.bindEvent = function () {
  var $this = this;
  this.dropdown.addEventListener("click", this._onClicked.bind(this));
  this.dropdown.addEventListener("keydown", this._onKeyPressed.bind(this));
  this.dropdown.addEventListener("focusin", triggerFocusIn.bind(this, this.el));
  this.dropdown.addEventListener("focusout", triggerFocusOut.bind(this, this.el));
  this.el.addEventListener("invalid", triggerValidationMessage.bind(this, this.el, 'invalid'));
  window.addEventListener("click", this._onClickedOutside.bind(this));
  if (this.config.searchable) {
    this._bindSearchEvent();
  }
};
NiceSelect.prototype._bindSearchEvent = function () {
  var searchBox = this.dropdown.querySelector(".nice-select-search");
  if (searchBox) {
    searchBox.addEventListener("click", function (e) {
      e.stopPropagation();
      return false;
    });
  }
  searchBox.addEventListener("input", this._onSearchChanged.bind(this));
};
NiceSelect.prototype._onClicked = function (e) {
  e.preventDefault();
  if (!hasClass(this.dropdown, "open")) {
    addClass(this.dropdown, "open");
    triggerModalOpen(this.el);
  } else if (!this.multiple) {
    removeClass(this.dropdown, "open");
    triggerModalClose(this.el);
  }
  if (hasClass(this.dropdown, "open")) {
    var search = this.dropdown.querySelector(".nice-select-search");
    if (search) {
      search.value = "";
      search.focus();
    }
    var t = this.dropdown.querySelector(".focus");
    removeClass(t, "focus");
    t = this.dropdown.querySelector(".selected");
    addClass(t, "focus");
    this.dropdown.querySelectorAll("ul li").forEach(function (item) {
      item.style.display = "";
    });
  } else {
    this.dropdown.focus();
  }
};
NiceSelect.prototype._onItemClicked = function (option, e) {
  var optionEl = e.target;
  if (!hasClass(optionEl, "disabled")) {
    if (this.multiple) {
      if (hasClass(optionEl, "selected")) {
        removeClass(optionEl, "selected");
        this.selectedOptions.splice(this.selectedOptions.indexOf(option), 1);
        this.el.querySelector("option[value=\"".concat(optionEl.dataset.value, "\"]")).removeAttribute('selected');
      } else {
        addClass(optionEl, "selected");
        this.selectedOptions.push(option);
      }
    } else {
      this.selectedOptions.forEach(function (item) {
        removeClass(item.element, "selected");
      });
      addClass(optionEl, "selected");
      this.selectedOptions = [option];
    }
    this._renderSelectedItems();
    this.updateSelectValue();
  }
};
NiceSelect.prototype.updateSelectValue = function () {
  if (this.multiple) {
    var select = this.el;
    this.selectedOptions.forEach(function (item) {
      var el = select.querySelector("option[value=\"".concat(item.data.value, "\"]"));
      if (el) {
        el.setAttribute("selected", true);
      }
    });
  } else if (this.selectedOptions.length > 0) {
    this.el.value = this.selectedOptions[0].data.value;
  }
  triggerChange(this.el);
};
NiceSelect.prototype.resetSelectValue = function () {
  if (this.multiple) {
    var select = this.el;
    this.selectedOptions.forEach(function (item) {
      var el = select.querySelector("option[value=\"".concat(item.data.value, "\"]"));
      if (el) {
        el.removeAttribute("selected");
      }
    });
  } else if (this.selectedOptions.length > 0) {
    this.el.selectedIndex = -1;
  }
  triggerChange(this.el);
};
NiceSelect.prototype._onClickedOutside = function (e) {
  if (!this.dropdown.contains(e.target)) {
    removeClass(this.dropdown, "open");
    triggerModalClose(this.el);
  }
};
NiceSelect.prototype._onKeyPressed = function (e) {
  // Keyboard events

  var focusedOption = this.dropdown.querySelector(".focus");
  var open = hasClass(this.dropdown, "open");

  // Enter
  if (e.keyCode == 13) {
    if (open) {
      triggerClick(focusedOption);
    } else {
      triggerClick(this.dropdown);
    }
  } else if (e.keyCode == 40) {
    // Down
    if (!open) {
      triggerClick(this.dropdown);
    } else {
      var next = this._findNext(focusedOption);
      if (next) {
        var t = this.dropdown.querySelector(".focus");
        removeClass(t, "focus");
        addClass(next, "focus");
      }
    }
    e.preventDefault();
  } else if (e.keyCode == 38) {
    // Up
    if (!open) {
      triggerClick(this.dropdown);
    } else {
      var prev = this._findPrev(focusedOption);
      if (prev) {
        var t = this.dropdown.querySelector(".focus");
        removeClass(t, "focus");
        addClass(prev, "focus");
      }
    }
    e.preventDefault();
  } else if (e.keyCode == 27 && open) {
    // Esc
    triggerClick(this.dropdown);
  } else if (e.keyCode === 32 && open) {
    // Space
    return false;
  }
  return false;
};
NiceSelect.prototype._findNext = function (el) {
  if (el) {
    el = el.nextElementSibling;
  } else {
    el = this.dropdown.querySelector(".list .option");
  }
  while (el) {
    if (!hasClass(el, "disabled") && el.style.display != "none") {
      return el;
    }
    el = el.nextElementSibling;
  }
  return null;
};
NiceSelect.prototype._findPrev = function (el) {
  if (el) {
    el = el.previousElementSibling;
  } else {
    el = this.dropdown.querySelector(".list .option:last-child");
  }
  while (el) {
    if (!hasClass(el, "disabled") && el.style.display != "none") {
      return el;
    }
    el = el.previousElementSibling;
  }
  return null;
};
NiceSelect.prototype._onSearchChanged = function (e) {
  var open = hasClass(this.dropdown, "open");
  var text = e.target.value;
  text = text.toLowerCase();
  if (text == "") {
    this.options.forEach(function (item) {
      item.element.style.display = "";
    });
  } else if (open) {
    var matchReg = new RegExp(text);
    this.options.forEach(function (item) {
      var optionText = item.data.text.toLowerCase();
      var matched = matchReg.test(optionText);
      item.element.style.display = matched ? "" : "none";
    });
  }
  this.dropdown.querySelectorAll(".focus").forEach(function (item) {
    removeClass(item, "focus");
  });
  var firstEl = this._findNext(null);
  addClass(firstEl, "focus");
};
function bind(el, options) {
  return new NiceSelect(el, options);
}

},{}]},{},[2])


//# sourceMappingURL=main.min.js.map
