(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _initAccordion = require("./modules/accordion/init-accordion");
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
window.addEventListener('DOMContentLoaded', function () {
  (0, _iosVhFix.iosVhFix)();

  //menu
  var burger = document.querySelector('.burger');
  var menu = document.querySelector('.menu');
  burger.addEventListener('click', function () {
    menu.classList.toggle('show');
    menu.classList.toggle('hide');
    burger.classList.toggle('active');
    document.querySelector('body').classList.toggle('dark');
  });
  var bodyElement = document.body;
  function handleWindowResize() {
    var windowWidth = window.innerWidth;
    if (windowWidth >= 768) {
      bodyElement.classList.remove('dark');
      menu.classList.remove('show');
      menu.classList.add('hide');
      burger.classList.remove('active');
    }
  }
  window.addEventListener('resize', handleWindowResize);

  //клик на соревнование

  //filter-modal
  var filtersToggle = document.querySelector('.competitions-list__filter-mobile-button');
  var filtersContainer = document.querySelector('.filters');
  var filtersClose = document.querySelector('.filters__button-close');
  if (filtersToggle) {
    filtersToggle.addEventListener('click', function () {
      filtersContainer.classList.toggle('active');
      document.querySelector('body').classList.toggle('dark-modal');
    });
    filtersClose.addEventListener('click', function () {
      filtersContainer.classList.remove('active');
      document.querySelector('body').classList.remove('dark-modal');
    });
  }
  window.addEventListener('resize', function () {
    var windowWidth = window.innerWidth;
    if (windowWidth >= 768) {
      filtersContainer.classList.remove('active');
      document.querySelector('body').classList.remove('dark-modal');
    }
  });

  //sort
  function sortCompetitions(sortBy) {
    var competitionList = document.querySelectorAll('.competitions__item');
    var competitionItemsArray = Array.from(competitionList);
    if (sortBy === 'date') {
      competitionItemsArray.sort(function (a, b) {
        var dateA = new Date(a.querySelector('[data-date]').getAttribute('data-date').split('.').reverse().join('-'));
        var dateB = new Date(b.querySelector('[data-date]').getAttribute('data-date').split('.').reverse().join('-'));
        return dateB.getFullYear() - dateA.getFullYear() || dateB.getMonth() - dateA.getMonth() || dateB.getDate() - dateA.getDate();
      });
    } else if (sortBy === 'popularity') {
      competitionItemsArray.sort(function (a, b) {
        var popularityA = a.getAttribute('data-popularity');
        var popularityB = b.getAttribute('data-popularity');
        return popularityB - popularityA;
      });
    }
    var competitionsContainer = document.querySelector('.competitions');
    var fragment = document.createDocumentFragment();
    competitionItemsArray.forEach(function (item) {
      fragment.appendChild(item);
    });
    if (competitionsContainer) {
      competitionsContainer.innerHTML = '';
      competitionsContainer.appendChild(fragment);
    }
  }
  //при загрузке страницы изначально сортировка по популярности
  sortCompetitions('popularity');
  var sortToggle = document.querySelector('.competitions-list__sort-button');
  var sortOptions = document.querySelector('.competitions-list__sort-list');
  if (sortToggle && sortOptions) {
    sortToggle.addEventListener('click', function () {
      sortOptions.classList.toggle('active');
      sortToggle.querySelector('.arrow').classList.toggle('active');
    });
    var sortLinks = sortOptions.querySelectorAll('a');
    sortLinks.forEach(function (link) {
      link.addEventListener('click', function (event) {
        event.preventDefault();
        var sortBy = event.target.dataset.sort;
        sortCompetitions(sortBy);
        console.log(1);
        var windowWidth = window.innerWidth;
        if (windowWidth < 1440) {
          sortOptions.classList.toggle('active');
          sortToggle.querySelector('.arrow').classList.toggle('active');
        }
        sortLinks.forEach(function (l) {
          return l.classList.remove('active');
        });
        event.target.classList.add('active');
      });
    });
  }
  window.addEventListener('resize', function () {
    var windowWidth = window.innerWidth;
    if (windowWidth >= 1440) {
      sortOptions.classList.remove('active');
      sortToggle.querySelector('.arrow').classList.remove('active');
    }
  });

  //card address
  var addressElements = document.querySelectorAll('.competitions__address');
  function updateAddresses() {
    var windowWidth = window.innerWidth;
    addressElements.forEach(function (addressElement) {
      var shortAddress = addressElement.dataset.addressMobile;
      var longAddress = addressElement.dataset.addressDesktop;
      addressElement.textContent = windowWidth >= 1440 ? longAddress : shortAddress;
    });
  }
  updateAddresses();
  window.addEventListener('resize', updateAddresses);

  //registration button
  var competitionsButtons = document.querySelectorAll('.competitions__buttons');
  competitionsButtons.forEach(function (button) {
    var buttonRegistration = button.querySelector('a').getAttribute('data-button-registration');
    var priceElement = button.querySelector('p');
    if (buttonRegistration == 'over' || buttonRegistration == 'registration-completed') {
      priceElement.style.display = 'none';
    } else if (buttonRegistration == 'registration-active') {
      priceElement.style.display = 'block';
    }
  });

  //filter search
  var filterInput = document.querySelector('.filter-input');
  var filterList = document.querySelectorAll('.filter-item');
  var selectedContainer = document.querySelector('.selected-items');

  //filter checkbox + add container
  filterList.forEach(function (item) {
    var checkbox = item.querySelector('input[type="checkbox"]');
    checkbox.addEventListener('change', function () {
      var text = item.textContent;
      if (checkbox.checked) {
        addToSelectedContainer(text, item);
      } else {
        removeFromSelectedContainer(text, item);
      }
    });
  });
  function addToSelectedContainer(text, item) {
    filterItems();
    selectedContainer.classList.remove('visually-hidden');
    var selectedItem = document.createElement('div');
    selectedItem.classList.add('selected-item');
    selectedItem.dataset.text = text; // Сохраняем текст в data-атрибуте

    var selectedItemText = document.createElement('span');
    selectedItemText.textContent = text;
    var removeBtn = document.createElement('span');
    removeBtn.classList.add('remove-btn');
    var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
    svg.setAttribute('width', '10');
    svg.setAttribute('height', '10');
    svg.setAttribute('viewBox', '0 0 10 10');
    svg.setAttribute('fill', 'none');
    var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttribute('d', 'M1 1L9 9M9 1L1 9');
    svg.appendChild(path);
    removeBtn.appendChild(svg);
    removeBtn.addEventListener('click', function () {
      removeFromSelectedContainer(text, item);
      item.querySelector('input').checked = false;
      filterItems();
    });
    selectedItem.appendChild(selectedItemText);
    selectedItem.appendChild(removeBtn);
    selectedContainer.appendChild(selectedItem);
  }
  function removeFromSelectedContainer(text, item) {
    filterItems();
    var selectedItems = selectedContainer.querySelectorAll('.selected-item');
    selectedItems.forEach(function (selectedItem) {
      if (selectedItem.dataset.text === text) {
        selectedItem.remove();
        var checkbox = item.querySelector('input[type="checkbox"]');
        checkbox.checked = false;
        if (document.querySelectorAll('.selected-item').length === 0) {
          selectedContainer.classList.add('visually-hidden');
        } else {
          selectedContainer.classList.remove('visually-hidden');
        }
      }
    });
  }

  //filter reset
  var resetButton = document.querySelector('.selected-container button[type="reset"]');
  if (resetButton) {
    resetButton.addEventListener('click', function () {
      var forms = document.querySelectorAll('form');
      forms.forEach(function (form) {
        form.reset();
      });
      var checkboxes = document.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(function (checkbox) {
        checkbox.checked = false;
      });
      selectedContainer.classList.add('visually-hidden');
      var selectedItems = selectedContainer.querySelectorAll('.selected-item');
      selectedItems.forEach(function (i) {
        return i.remove();
      });
      filterItems();
    });
  }

  //filter item accordion
  setTimeout((0, _initAccordion.initAccordions)(), 1000);

  //submit form mobile
  var form = document.getElementById('filterForm');
  if (form) {
    form.addEventListener('submit', function (event) {
      event.preventDefault();
      filtersContainer.classList.remove('active');
      document.querySelector('body').classList.remove('dark-modal');
    });
  }

  //фильтрация каталога
  var competitionItems = document.querySelectorAll('.competitions__item');
  var dateInput = document.querySelector('input[name="input-date[]"]');
  var pagination = document.querySelector('.pagination');
  function filterItems() {
    var seriesFilter = Array.from(document.querySelector('#filter-series').querySelectorAll('input:checked')).map(function (el) {
      return el.value;
    });
    var distanceFilter = Array.from(document.querySelector('#filter-distance').querySelectorAll('input:checked')).map(function (el) {
      return el.value;
    });
    var categoryFilter = Array.from(document.querySelector('#filter-category').querySelectorAll('input:checked')).map(function (el) {
      return el.value;
    });
    var inputDateFilter = dateInput.value;
    var selectedDateRanges = Array.from(document.querySelectorAll('input[name="date[]"]:checked')).map(function (input) {
      return input.value;
    });
    var visibleItems = 0;
    competitionItems.forEach(function (item) {
      item.classList.remove('hidden');
      var series = item.dataset.series;
      var distances = Array.from(item.querySelectorAll('[data-distance]')).map(function (el) {
        return el.dataset.distance;
      });
      var category = item.querySelector('[data-category]').dataset.category;
      var region = item.querySelector('[data-region]').dataset.region;
      var itemDate = new Date(item.querySelector('[data-date]').dataset.date.split('.').reverse().join('-'));
      var matchesSeries = seriesFilter.length === 0 || seriesFilter.includes(series);
      var matchesDistance = distanceFilter.length === 0 || distanceFilter.some(function (filter) {
        return distances.includes(filter);
      });
      var matchesCategory = categoryFilter.length === 0 || categoryFilter.includes(category);
      var matchesRegion = customSelectInput.value.length === 0 || customSelectInput.dataset.value === region;
      var matchesDate = inputDateFilter.length === 10 ? itemDate.toLocaleDateString('ru-RU') === inputDateFilter : selectedDateRanges.length === 0 || selectedDateRanges.some(function (range) {
        return isDateInRange(itemDate, range, 0);
      });
      if (inputDateFilter.length === 21) {
        var _inputDateFilter$spli = inputDateFilter.split("-"),
          _inputDateFilter$spli2 = _slicedToArray(_inputDateFilter$spli, 2),
          startDate = _inputDateFilter$spli2[0],
          endDate = _inputDateFilter$spli2[1];
        var firstDay = new Date(startDate.split('.').reverse().join('-'));
        var start = new Date(startDate.replace(/(\d{2})\.(\d{2})\.(\d{4})/, "$3-$2-$1"));
        var end = new Date(endDate.replace(/(\d{2})\.(\d{2})\.(\d{4})/, "$3-$2-$1"));
        var diffInMs = end.getTime() - start.getTime();
        var range = Math.ceil(diffInMs / (1000 * 60 * 60 * 24));
        matchesDate = isDateInRange(itemDate, range, firstDay);
      }
      if (matchesSeries && matchesDistance && matchesCategory && matchesDate && matchesRegion) {
        item.classList.remove('hidden');
        visibleItems++;
      } else {
        item.classList.add('hidden');
      }
    });
    if (visibleItems === 0) {
      pagination.classList.add('visually-hidden');
      document.querySelector('.list-container__nothing').classList.remove('visually-hidden');
    } else {
      pagination.classList.remove('visually-hidden');
      document.querySelector('.list-container__nothing').classList.add('visually-hidden');
    }
  }
  function isDateInRange(date, range, firstDay) {
    var rangeStr = range.toString();
    console.log(date, rangeStr);
    var today = new Date();
    var daysToAdd = parseInt(rangeStr, 10);
    var endDate;
    if (firstDay === 0) {
      endDate = new Date(today.getTime() + daysToAdd * 24 * 60 * 60 * 1000);
      return date >= today && date <= endDate;
    } else {
      endDate = new Date(firstDay.getTime() + daysToAdd * 24 * 60 * 60 * 1000);
      return date >= firstDay && date <= endDate;
    }
  }
  if (dateInput) {
    dateInput.addEventListener('change', filterItems);
  }

  //подсказки при воде названия в фильтре
  var suggestionList = document.getElementById('suggestion-list');
  var competitionTitles = Array.from(document.querySelectorAll('.competitions__title')).map(function (title) {
    return title.textContent.toLowerCase();
  });
  if (filterInput) {
    filterInput.addEventListener('input', function () {
      var filterText = this.value.toLowerCase();
      suggestionList.innerHTML = '';
      var matchingTitles = competitionTitles.filter(function (title) {
        return title.includes(filterText);
      });
      if (matchingTitles.length > 0) {
        matchingTitles.forEach(function (title) {
          var suggestionItem = document.createElement('div');
          suggestionItem.classList.add('suggestion-item');
          suggestionItem.textContent = title;
          suggestionItem.addEventListener('click', function () {
            filterInput.value = title;
            suggestionList.style.display = 'none';
            filterCompetitions(title.toLowerCase());
          });
          suggestionList.appendChild(suggestionItem);
        });
        suggestionList.style.display = 'block';
      } else {
        suggestionList.style.display = 'none';
      }
      filterCompetitions(filterText);
    });
  }
  function filterCompetitions(filterText) {
    competitionItems.forEach(function (item) {
      var title = item.querySelector('.competitions__title').textContent.toLowerCase();
      if (title.includes(filterText)) {
        item.classList.remove('hidden');
      } else {
        item.classList.add('hidden');
      }
    });
  }

  //подсказка региона
  var customSelect = document.querySelector('.custom-select');
  var customSelectInput = document.querySelector('.custom-select__input');
  var customSelectOptions = document.querySelectorAll('.custom-select__option');
  if (customSelectOptions) {
    customSelectOptions.forEach(function (option) {
      option.addEventListener('click', function () {
        customSelectInput.value = option.textContent;
        customSelectInput.dataset.value = option.dataset.value;
        filterItems();
        customSelect.querySelector('.custom-select__options').style.display = 'none';
        customSelect.querySelector('.arrow').classList.remove('active');
      });
    });
  }
  if (customSelectInput) {
    customSelectInput.addEventListener('click', function () {
      if (customSelect.querySelector('.custom-select__options').style.display === 'block') {
        customSelect.querySelector('.custom-select__options').style.display = 'none';
        console.log(customSelect.querySelector('.arrow'));
        customSelect.querySelector('.arrow').classList.remove('active');
      } else {
        customSelect.querySelector('.custom-select__options').style.display = 'block';
        customSelect.querySelector('.arrow').classList.add('active');
        console.log(customSelect.querySelector('.arrow'));
      }
    });
    customSelectInput.addEventListener('input', function () {
      var searchText = customSelectInput.value.toLowerCase();
      var filteredOptions = Array.from(customSelectOptions).filter(function (option) {
        return option.textContent.toLowerCase().includes(searchText);
      });
      customSelect.querySelector('.custom-select__options').style.display = filteredOptions.length > 0 ? 'block' : 'none';
      filteredOptions.forEach(function (option) {
        option.style.display = 'block';
      });
      Array.from(customSelectOptions).filter(function (option) {
        return !filteredOptions.includes(option);
      }).forEach(function (option) {
        option.style.display = 'none';
      });
    });
  }
  document.addEventListener('click', function (event) {
    if (!customSelect.contains(event.target)) {
      customSelect.querySelector('.custom-select__options').style.display = 'none';
    }
  });

  //календарь
  var dateInputs = document.querySelectorAll('.date-input');
  dateInputs.forEach(function (dateInput) {
    var input = dateInput.querySelector('input[name="input-date[]"]');
    var button = dateInput.querySelector('.date-input__btn');
    var calendar = dateInput.querySelector('.date-picker__calendar');
    var prevMonthButton = dateInput.querySelector('.date-picker__prev-month');
    var nextMonthButton = dateInput.querySelector('.date-picker__next-month');
    var daysContainer = dateInput.querySelector('.date-picker__days');
    var currentDate = new Date();
    var startDate = null;
    var endDate = null;
    function formatDate(date) {
      return "".concat(date.getDate().toString().padStart(2, '0'), ".").concat((date.getMonth() + 1).toString().padStart(2, '0'), ".").concat(date.getFullYear());
    }
    function renderCalendar() {
      var currentMonth = currentDate.getMonth();
      var currentYear = currentDate.getFullYear();
      var firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay() || 7; // Если воскресенье, считаем как 7
      var daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
      var monthNames = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
      daysContainer.innerHTML = '';

      // Добавляем пустые дни в начале
      for (var i = 1; i < firstDayOfMonth; i++) {
        var day = document.createElement('div');
        day.classList.add('date-picker__day', 'date-picker__day--empty');
        daysContainer.appendChild(day);
      }

      // Заполняем дни месяца
      var _loop = function _loop(_i) {
        var day = document.createElement('div');
        day.classList.add('date-picker__day');
        day.textContent = _i;
        day.addEventListener('click', function () {
          selectDate(new Date(currentYear, currentMonth, _i));
        });
        day.addEventListener('mouseover', function () {
          if (startDate && !endDate) {
            var _dayDate = new Date(currentYear, currentMonth, _i);
            if (_dayDate >= startDate || _dayDate <= startDate) {
              day.classList.add('is-hovered');
              var _daysContainer = dateInput.querySelector('.date-picker__days');
              var days = _daysContainer.querySelectorAll('.date-picker__day');
              days.forEach(function (dayElement) {
                var elementDate = new Date(currentYear, currentMonth, parseInt(dayElement.textContent));
                if (elementDate >= startDate && elementDate <= _dayDate || elementDate <= startDate && elementDate >= _dayDate) {
                  dayElement.classList.add('is-in-range');
                }
              });
            }
          }
        });
        day.addEventListener('mouseout', function () {
          if (startDate && !endDate) {
            day.classList.remove('is-hovered');
            var _daysContainer2 = dateInput.querySelector('.date-picker__days');
            var days = _daysContainer2.querySelectorAll('.date-picker__day');
            days.forEach(function (dayElement) {
              dayElement.classList.remove('is-in-range');
            });
          }
        });
        var dayDate = new Date(currentYear, currentMonth, _i);
        if (startDate && endDate) {
          if (dayDate >= startDate && dayDate <= endDate || dayDate <= startDate && dayDate >= endDate) {
            day.classList.add('is-in-range');
          }
          if (dayDate.getDate() === startDate.getDate() && dayDate.getMonth() === startDate.getMonth() && dayDate.getFullYear() === startDate.getFullYear()) {
            day.classList.add('is-start-date');
          }
          if (dayDate.getDate() === endDate.getDate() && dayDate.getMonth() === endDate.getMonth() && dayDate.getFullYear() === endDate.getFullYear()) {
            day.classList.add('is-end-date');
          }
        } else if (startDate) {
          if (dayDate.getDate() === startDate.getDate() && dayDate.getMonth() === startDate.getMonth() && dayDate.getFullYear() === startDate.getFullYear()) {
            day.classList.add('is-start-date');
          }
        }
        daysContainer.appendChild(day);
      };
      for (var _i = 1; _i <= daysInMonth; _i++) {
        _loop(_i);
      }
      dateInput.querySelector('.date-picker__current-month').textContent = "".concat(monthNames[currentMonth], " ").concat(currentYear);
    }
    function selectDate(date) {
      if (!startDate) {
        startDate = date;
        input.value = formatDate(startDate);
        renderCalendar();
      } else if (!endDate) {
        endDate = date;
        if (endDate < startDate) {
          var _ref = [endDate, startDate];
          startDate = _ref[0];
          endDate = _ref[1];
        }
        input.value = "".concat(formatDate(startDate), "-").concat(formatDate(endDate));
        calendar.style.display = 'none';
        renderCalendar();
        filterItems();
      } else {
        startDate = date;
        endDate = null;
        input.value = formatDate(startDate);
        renderCalendar();
      }
    }
    button.addEventListener('click', function () {
      if (calendar.style.display === 'block') {
        calendar.style.display = 'none';
      } else {
        calendar.style.display = 'block';
      }
    });
    input.addEventListener('click', function () {
      if (calendar.style.display === 'block') {
        calendar.style.display = 'none';
      } else {
        calendar.style.display = 'block';
      }
    });
    document.addEventListener('click', function (event) {
      if (!dateInput.contains(event.target) && !event.target.classList.contains('date-picker__day')) {
        calendar.style.display = 'none';
      }
    });
    prevMonthButton.addEventListener('click', function () {
      currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
      renderCalendar();
    });
    nextMonthButton.addEventListener('click', function () {
      currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);
      renderCalendar();
    });
    renderCalendar();
  });

  //клик на построннюю область
  document.addEventListener('click', function (event) {
    if (!event.target.closest('.filter-container')) {
      suggestionList.style.display = 'none';
    }
    if (!event.target.closest('.competitions-list__sort-list') && !event.target.closest('.competitions-list__sort-button')) {
      document.querySelector('.competitions-list__sort-list').classList.remove('active');
      document.querySelector('.competitions-list__sort-button .arrow').classList.remove('active');
    }
    if (!event.target.closest('.menu') && !event.target.closest('header')) {
      document.querySelector('.menu').classList.remove('show');
      document.querySelector('body').classList.remove('dark');
      document.querySelector('.burger').classList.remove('active');
    }
  });

  // const informationModal = document.querySelector('.information-modal');
  // const modalHeight = informationModal.offsetHeight;
  //   const modalTop = informationModal.getBoundingClientRect().top;

  // window.addEventListener('scroll', function() {
  //   const modalTopTemp = informationModal.getBoundingClientRect().top;
  //   if (modalTop !== modalTopTemp) {
  //     informationModal.classList.add('hidden');
  //   } else {
  //     informationModal.classList.remove('hidden');
  //   }
  // });

  // // Получаем элемент information-modal
  // const informationModal = document.querySelector('.information-modal');

  // // Переменные для отслеживания состояния элемента
  // let isModalVisible = true;
  // let prevScrollPos = window.pageYOffset;
  // let modalHeight = informationModal.offsetHeight;
  // let modalBottom = informationModal.getBoundingClientRect().bottom;

  // // Добавляем обработчик события прокрутки страницы
  // window.addEventListener('scroll', function() {
  //   const currentScrollPos = window.pageYOffset;
  //   const windowHeight = window.innerHeight;

  //   // Если пользователь прокручивает вниз и нижняя граница элемента достигает нижней части экрана
  //   if (currentScrollPos > prevScrollPos && modalBottom <= windowHeight) {
  //     // Скрываем элемент
  //     informationModal.classList.add('hidden');
  //     isModalVisible = false;
  //   } else {
  //     // Если пользователь прокручивает вверх или нижняя граница элемента не достигает нижней части экрана
  //     // Показываем элемент
  //     informationModal.classList.remove('hidden');
  //     isModalVisible = true;
  //   }

  //   // Обновляем предыдущее положение прокрутки и нижнюю границу элемента
  //   prevScrollPos = currentScrollPos;
  //   modalBottom = informationModal.getBoundingClientRect().bottom;
  // });

  // Получаем элемент information-modal
  var informationModal = document.querySelector('.information-modal');
  var isModalVisible = true;
  var prevScrollPos = window.pageYOffset;
  var modalHeight = informationModal.offsetHeight;
  var modalTop = informationModal.getBoundingClientRect().top;
  var modalTopStart = informationModal.getBoundingClientRect().top;
  var hiddenModalTop = 0;
  window.addEventListener('scroll', registrationModal);
  window.addEventListener('load', registrationModal);
  window.addEventListener('resize', registrationModal);
  function registrationModal() {
    var windowWidth = window.innerWidth;
    var currentScrollPos = window.pageYOffset;
    var windowHeight = window.innerHeight;
    if (informationModal) {
      if (modalTop + modalHeight < windowHeight) {
        informationModal.classList.add('none');
        isModalVisible = false;
      }
      if (windowWidth < 768) {
        if (currentScrollPos > prevScrollPos && modalTop + modalHeight <= windowHeight) {
          hiddenModalTop = modalTop;
          console.log(hiddenModalTop);
          informationModal.classList.add('none');
          isModalVisible = false;
        } else if (currentScrollPos <= modalTopStart) {
          informationModal.classList.remove('none');
          isModalVisible = true;
        }
        prevScrollPos = currentScrollPos;
        modalTop = informationModal.getBoundingClientRect().top;
      } else {
        informationModal.classList.remove('none');
        isModalVisible = true;
      }
    }
  }
  var moreButton = document.querySelector('.information-modal__more');
  moreButton.addEventListener('click', function () {
    document.querySelector('.information-modal').classList.add('mobile-modal');
    document.querySelector('body').classList.add('dark-modal');
  });
  var closeModalButton = document.querySelector('.information-modal__close');
  closeModalButton.addEventListener('click', function () {
    document.querySelector('.information-modal').classList.remove('mobile-modal');
    document.querySelector('body').classList.remove('dark-modal');
  });
});

},{"./modules/accordion/init-accordion":3,"./utils/ios-vh-fix":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordions = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Accordions = exports.Accordions = /*#__PURE__*/function () {
  function Accordions() {
    _classCallCheck(this, Accordions);
    this._openHeight = 0;
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._windowResizeHandler = this._windowResizeHandler.bind(this);
    this._init();
  }
  return _createClass(Accordions, [{
    key: "_init",
    value: function _init() {
      this.fullUpdate();
      document.addEventListener('click', this._documentClickHandler);
      window.addEventListener('resize', this._windowResizeHandler);
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-accordion="button"]')) {
        return;
      }
      evt.preventDefault();
      var parent = target.closest('[data-accordion="parent"]');
      if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
        return;
      }
      var element = target.closest('[data-accordion="element"]');
      if (element.classList.contains('is-active')) {
        this.closeAccordion(element);
        return;
      }
      this.openAccordion(element);
    }
  }, {
    key: "_windowResizeHandler",
    value: function _windowResizeHandler() {
      if (this._windowWidth === window.innerWidth) {
        return;
      }
      this._windowWidth = window.innerWidth;
      this.updateAccordionsHeight();
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this = this;
      var elements = parent.querySelectorAll('[data-accordion="element"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion="parent"]');
        if (currentParent === parent) {
          _this.closeAccordion(element);
        }
      });
    }
  }, {
    key: "updateAccordionsHeight",
    value: function updateAccordionsHeight() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (element) {
        var content = element.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight + 5, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
        return;
      }
      var closeElements = document.querySelectorAll('[data-accordion="element"]:not(.is-active)');
      closeElements.forEach(function (closeElement) {
        var parent = closeElement.closest('[data-accordion="parent"]');
        var content = closeElement.querySelector('[data-accordion="content"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.maxHeight = null;
      });
      var openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      openElements.forEach(function (openElement) {
        var content = openElement.querySelector('[data-accordion="content"]');
        var parent = openElement.closest('[data-accordion="parent"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight + 5, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
      });
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      var _this2 = this;
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var openElements;
      if (parent) {
        openElements = parent.querySelectorAll('[data-accordion="element"].is-active');
      } else {
        openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      }
      openElements.forEach(function (openElement) {
        var innerParent = openElement.querySelector('[data-accordion="parent"]');
        if (innerParent) {
          return;
        }
        _this2.openAccordion(openElement, transition);
      });
      this.updateAccordionsHeight();
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var parentElement = element.closest('[data-accordion="parent"]');
      var contentElement = element.querySelector('[data-accordion="content"]');
      this._openHeight += contentElement.scrollHeight;
      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }
      element.classList.add('is-active');
      if (transition) {
        contentElement.style.maxHeight = "".concat(this._openHeight + 5, "px");
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = "".concat(this._openHeight + 5, "px");
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
      if (parentElement.closest('[data-accordion="element"]')) {
        this.openAccordion(parentElement.closest('[data-accordion="element"]'), transition);
        return;
      }
      this._openHeight = 0;
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var contentElement = element.querySelector('[data-accordion="content"]');
      if (!contentElement) {
        return;
      }
      element.classList.remove('is-active');
      if (transition) {
        contentElement.style.maxHeight = '0';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = '0';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
    }
  }]);
}();

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAccordions = exports.accordions = void 0;
var _accordions = require("./accordions");
var accordions;
var initAccordions = exports.initAccordions = function initAccordions() {
  exports.accordions = accordions = new _accordions.Accordions();
  // Используйте в разработке экспортируемую переменную accordions, window сделан для бэкэнда
  window.accordions = accordions;
};

},{"./accordions":2}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = exports.iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = exports.iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};

},{"./ios-checker":4}]},{},[1])


//# sourceMappingURL=main.min.js.map
